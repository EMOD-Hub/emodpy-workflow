{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to emodpy-workflow","text":"<p>emodpy-workflow is a collection of commands and interfaces intended to support data-driven scientific computing workflows. In particular, its core currently standardizes the system of creating, calibrating, running, and obtaining output from EMOD-HIV model scenarios. Teams of users can more easily work with each other's projects using emodpy-workflow as it provides standard way of using EMOD-HIV.</p>"},{"location":"#other-related-documentation","title":"Other related documentation","text":"<ul> <li>emodpy-hiv</li> <li>EMOD-HIV</li> <li>idmtools</li> </ul>"},{"location":"#community","title":"Community","text":"<p>The EMOD community is made up of researchers and software developers, primarily focused on malaria and HIV research. We value mutual respect, openness, and a collaborative spirit. If these values resonate with you, we invite you to join our EMOD Slack community by completing this form:</p> <p>https://forms.office.com/r/sjncGvBjvZ</p>"},{"location":"#support-and-contributions","title":"Support and contributions","text":"<p>The code in this repository was developed by IDM to support our research in disease transmission and managing epidemics. We\u2019ve made it publicly available under the MIT License to provide others with a better understanding of our research and an opportunity to build upon it for their own work. We make no representations that the code works as intended or that we will provide support, address issues that are found, or accept pull requests. You are welcome to create your own fork and modify the code to suit your own modeling needs as contemplated under the MIT License.</p> <p>If you have feature requests, issues, or new code, please see our CONTRIBUTING page for how to provide your feedback.</p> <p>Questions or comments can be directed to idmsupport@gatesfoundation.org.</p>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>The code in this repository was developed by IDM and other collaborators to support our joint research on flexible agent-based modeling. We've made it publicly available under the MIT License to provide others with a better understanding of our research and an opportunity to build upon it for their own work. We make no representations that the code works as intended or that we will provide support, address issues that are found, or accept pull requests.  You are welcome to create your own fork and modify the code to suit your own modeling needs as permitted under the MIT License.</p>"},{"location":"installation/","title":"Install","text":""},{"location":"installation/#software-prerequisites","title":"Software prerequisites","text":"<p>The following is required:</p> <ul> <li>Windows or Linux (Mac is loosely supported)</li> <li>Python 3.9.X (3.9.13 or higher) (64-bit)</li> </ul>"},{"location":"installation/#python","title":"Python","text":"<p>To verify you have the correct version, enter the following command:</p> <pre><code>python --version\n</code></pre> <p>You should see something similar to the following and it should start with \"3.9\":</p> <pre><code>Python 3.9.19\n</code></pre> <p>If you do not get that, you may need to provide the full path to the python executable or you may need to install it.  If you need the full path, please use the full path when creating the virtual environment below.</p>"},{"location":"installation/#docker","title":"Docker","text":"<p>If you want to run EMOD locally using the Container Platform, you will also need to install Docker.  Installation will require administrative privileges.  Follow the instructions on the Docker website:</p> <ul> <li>Windows     (You might be able to install WSL via the Docker Desktop installer.)</li> <li>Linux</li> <li>Mac</li> </ul> <p>Warning</p> <p>Installing can require downloading close to one gigabyte of data.  The first time you use EMOD with the Container Platform it will download another half gigabyte.</p>"},{"location":"installation/#setup-virtual-environment","title":"Setup virtual environment","text":"<p>The following commands will setup a virtual environment.  You will want to do this for all of your new projects.</p> <ol> <li> <p>Create the virtual environment</p> <pre><code>python -m venv env\n</code></pre> </li> <li> <p>Activate the virtual environment:</p> WindowsLinux <pre><code>env\\Scripts\\activate.bat\n</code></pre> <pre><code>source env/bin/activate\n</code></pre> </li> <li> <p>Ensure pip is up to date:</p> <pre><code>python -m pip install pip --upgrade\n</code></pre> </li> </ol>"},{"location":"installation/#install-emodpy-workflow","title":"Install emodpy-workflow:","text":"<p>Use the following command to install emodpy-workflow from IDM's Artifactory:</p> <pre><code>python -m pip install emodpy-workflow --extra-index-url=https://packages.idmod.org/api/pypi/pypi-production/simple\n</code></pre>"},{"location":"how_to/how_to_calibrate_frame/","title":"Calibrate a frame","text":"<p>The basic command to calibrate a frame to reference data in an ingest form using the optim_tool algorithm is:</p> <pre><code>python -m emodpy_workflow.scripts.calibrate -f FRAME -p PLATFORM optim_tool\n</code></pre> <p>... where FRAME is the name of the frame to calibrate and PLATFORM is the idmtools.ini platform name to run on.</p> <p>There are numerous additional parameters that can be set to control the behavior of the process. They are specified before the algorithm name (like optim_tool) on the command line. </p> <p>To see parameters for controlling the calibration process, run:</p> <pre><code>python -m emodpy_workflow.scripts.calibrate -h\n</code></pre> <p>Each optimization algorithm (like optim_tool) has its own parameters that are specified after the algorithm name. To  see parameters for controlling the details of the chosen optimization algorithm, run:</p> <pre><code>python -m emodpy_workflow.scripts.calibrate optim_tool -h\n</code></pre>"},{"location":"how_to/how_to_calibrate_frame/#resample-a-calibration","title":"Resample a calibration","text":"<p>Resampling a calibration is the process of selecting one or more sets of parameters from a calibration.  These parameter sets are effectively \"a model calibration\", the end result of a calibration process. They also contain the random seed (Run_Number) to allow exact recreation of a simulation.</p> <p>To resample a calibration, run the following:</p> <pre><code>python -m emodpy_workflow.scripts.resample -d CALIBRATION_DIR -m METHOD -n NUMBER -o FILE\n</code></pre> <p>... where CALIBRATION_DIR is the directory path of a calibration process that has been performed, METHOD is the sampling algorithm, NUMBER is the count of parameter sets to select, and FILE is the file path to write CSV results to.</p>"},{"location":"how_to/how_to_create_frame/","title":"Create a frame","text":"<p>To make a new frame of an existing emodpy-hiv country model, execute the following:</p> <pre><code>python -m emodpy_workflow.scripts.new_frame --country COUNTRY --dest FRAME\n</code></pre> <p>... where COUNTRY is the country model class name and FRAME is the desired name of the frame to create. The created frame will be in the &lt;project_directory&gt;/frames/FRAME directory.</p>"},{"location":"how_to/how_to_create_frame/#extend-an-existing-frame","title":"Extend an existing frame","text":"<p>To extend an existing frame, which imports an existing frame as the starting point of a new frame, execute the  following:</p> <pre><code>python -m emodpy_workflow.scripts.extend_frame --source SOURCE --dest FRAME\n</code></pre> <p>... where SOURCE is the name of the frame to be extended and FRAME is the name of the frame to create.</p>"},{"location":"how_to/how_to_download_data/","title":"Download data","text":"<p>There is a single download command to download files from simulations. However, there are multiple ways to specify which simulations to download files from.</p> <p>The following examples show ho to download file output/ReportHIVByAgeAndGender.csv on the Container Platform.</p>"},{"location":"how_to/how_to_download_data/#from-an-experiment","title":"From an experiment:","text":"<p>To download a report file from all simulations in an experiment, execute a command similar to the following:</p> <pre><code>python -m emodpy_workflow.scripts.download -d output/ReportHIVByAgeAndGender.csv -p ContainerPlatform --exp-id EXP_ID -o OUTPUT_DIR\n</code></pre> <p>... where EXP_ID is the unique id of an experiment and OUTPUT_DIR is the directory to store downloaded files.</p>"},{"location":"how_to/how_to_download_data/#from-a-suite-of-experiments","title":"From a suite of experiments:","text":"<p>To download a report file from all simulations in a suite of experiments, execute a command similar to the following:</p> <pre><code> python -m emodpy_workflow.scripts.download -d output/ReportHIVByAgeAndGender.csv -p ContainerPlatform --suite-id SUITE_ID -o OUTPUT_DIR\n</code></pre> <p>... where SUITE_ID is the unique id of a suite and OUTPUT_DIR is the directory to store downloaded files.</p>"},{"location":"how_to/how_to_download_data/#from-a-resampled-parameter-sets-csv-file","title":"From a resampled parameter set's CSV file:","text":"<p>To download a report file from all simulations where you used a resampled parameter set, execute a command similar to the following:</p> <pre><code>python -m emodpy_workflow.scripts.download -d output/ReportHIVByAgeAndGender.csv -p ContainerPlatform -o OUTPUT_DIR -s RESAMPLE_FILE\n</code></pre> <p>... where RESAMPLE_FILE is the path of a <code>resample</code> command result and OUTPUT_DIR is the directory to store downloaded  files.</p>"},{"location":"how_to/how_to_download_data/#from-a-receipt-file","title":"From a receipt file:","text":"<p>To download a report file from a receipt file, execute a command similar to the following:</p> <pre><code>python -m emodpy_workflow.scripts.download -d output/ReportHIVByAgeAndGender.csv -p ContainerPlatform -r RECEIPT_FILE\n</code></pre> <p>... where RECEIPT_FILE is the path of a receipt created by a prior <code>run</code> command. Output will be stored in the directory containing the receipt.</p>"},{"location":"how_to/how_to_download_data/#download-multiple-files","title":"Download multiple files","text":"<p>Downloading more than one file from simulations is a small modification of downloading a single file. For downloading a single file, see: Download a file from all simulations in an experiment.</p> <p>To specify more than one file for download, one specifies all files together as the value of the <code>-d flag</code>,  separating them by a comma with no spaces.</p> <p>For example, to download two files change the following:</p> <pre><code>python -m emodpy_workflow.scripts.download -d output/ReportHIVByAgeAndGender.csv -p ContainerPlatform --exp-id EXP_ID -o OUTPUT_DIR\n</code></pre> <p>to</p> <pre><code>python -m emodpy_workflow.scripts.download -d output/ReportHIVByAgeAndGender.csv,output/InsetChart.json -p ContainerPlatform --exp-id EXP_ID -o OUTPUT_DIR\n</code></pre>"},{"location":"how_to/how_to_index/","title":"How-tos","text":"<p>The following items provide helpful snippets on how to do things with emodpy-workflow.</p> <ul> <li>Make a new project</li> <li>Create a frame</li> <li>Use elements in a frame</li> <li>List hyperparameters in a frame</li> <li>Calibrate a frame</li> <li>Create scenarios/sweeps</li> <li>Run a single simulation</li> <li>Download data</li> <li>Specific edits of a calibration ingest form</li> <li>Publish a new country model</li> </ul>"},{"location":"how_to/how_to_ingest_form/","title":"Ingest Form How-to guides","text":"<p>The filling an ingest form reference covers the context in which the macros noted in this how-to are used.  </p>"},{"location":"how_to/how_to_ingest_form/#how-to-generate-or-delete-observation-data-sheets","title":"How to generate or delete observation data sheets","text":"<p>Adding and removing observational data sheets are both accomplished in an ingest form by use of an Excel macro on the Observations metadata sheet. The macro is executed by clicking this button:</p> <p></p> <p>Steps:</p> <ol> <li>Add or delete Data Channel entries.</li> <li>Select the corresponding scaling type from the dropdown menus for the modified entries. Scaling means the data  channel scales with population (for example, a population count) and Non-scaling means it does not (for example, a  population fraction). A value of --select-- is blank.</li> <li>Click the above button.</li> </ol> <p>Any observational data sheets that were specified that did previously exist will be created, and any that were removed (no longer specified) will be deleted. The above button will create and/or remove observational data sheets to ensure full consistency.</p>"},{"location":"how_to/how_to_ingest_form/#how-to-generate-or-recreate-an-observation-data-sheet-data-entry-grid","title":"How to generate or recreate an observation data sheet data entry grid","text":"<p>On the desired observational data sheet:</p> <ol> <li>Edit the Stratifiers and Additional columns</li> <li>Click the following button.</li> </ol> <p></p> <p>A blank matching data entry grid will be generated. If one already existed, it will be erased and replaced by a blank table.</p> <p>Example of successful generation:</p> <p></p>"},{"location":"how_to/how_to_list_hyperparameters/","title":"List hyperparameters","text":""},{"location":"how_to/how_to_list_hyperparameters/#list-available-hyperparameters","title":"List available hyperparameters","text":"<p>To find all hyperparameters that are available for use (like calibration, scenario design), execute the following:</p> <pre><code>python -m emodpy_workflow.scripts.available_parameters -f FRAME\n</code></pre> <p>... where FRAME is the name of the frame to be inspected.</p>"},{"location":"how_to/how_to_list_hyperparameters/#list-duplicative-hyperparameters","title":"List duplicative hyperparameters","text":"<p>To find all hyperparameters that are used more than once in a frame, execute the following:</p> <pre><code>python -m emodpy_workflow.scripts.available_parameters -f FRAME\n</code></pre> <p>... where FRAME is the name of the frame to be inspected. Duplicated hyperparameters are listed at the bottom of the result.</p> <p>Duplicated hyperparameters can be intentional if a hyperparameter is intended to modify more than one ParameterizedCall value. They can also be unintentional if an existing hyperparameter name and label has been inadvertently reused. It is important to confirm that only intentional duplication exists to ensure model hyperparameter values are set as expected.</p>"},{"location":"how_to/how_to_make_project/","title":"Make a new project","text":"<p>To make a new project (directory), execute the following:</p> <pre><code>python -m emodpy_workflow.scripts.new_project -d DIRECTORY\n</code></pre> <p>... where DIRECTORY is the path to the project directory to create.</p>"},{"location":"how_to/how_to_publish_new_country_model/","title":"How to publish new country model","text":""},{"location":"how_to/how_to_publish_new_country_model/#publish-a-new-country-model","title":"Publish a new country model","text":"<p>To publish a new country model, you can follow the steps below. This example uses the <code>ZambiaWithLongLastingPrep</code> country model in  Modify Campaign 3: Modify Country Model tutorial.</p> <ol> <li> <p>Move <code>zambia_withlong_lasting_prep.py</code> to <code>/emodpy-hiv/emodpy_hiv/countries/zambia_withlong_lasting_prep/zambia_withlong_lasting_prep.py</code></p> </li> <li> <p>Add a <code>__init__.py</code> file under <code>emodpy_hiv/countries/zambia_withlong_lasting_prep</code> folder with: <pre><code>from .zambia_withlong_lasting_prep import ZambiaWithLongLastingPrep # noqa: F401\n</code></pre></p> </li> <li> <p>Add this line to <code>__init__.py</code> file under <code>emodpy_hiv/countries</code> folder: <pre><code>from emodpy_hiv.countries.zambia_withlong_lasting_prep import ZambiaWithLongLastingPrep # noqa: F401\n</code></pre></p> </li> <li> <p>Go to <code>emodpy_workflow</code>, reinstall <code>emodpy-hiv</code> with the new change, verify you can use the new country <code>ZambiaWithLongLastingPrep</code> model  by running: <pre><code>python -m emodpy_workflow.scripts.new_frame --country ZambiaWithLongLastingPrep --dest ZambiaWithLongLastingPrep\npython -m emodpy_workflow.scripts.available_parameters -F ZambiaWithLongLastingPrep\npython -m emodpy_workflow.scripts.run -N ZambiaWithLongLastingPrep -F ZambiaWithLongLastingPrep -o results/ZambiaWithLongLastingPrep -p ContainerPlatform\n</code></pre> You should not need to edit the <code>campaign.py</code>, <code>config.py</code> or <code>demographics.py</code> file in the frame anymore and no more  warning message about country model not found when creating a new frame with <code>ZambiaWithLongLastingPrep</code> country model.</p> </li> </ol>"},{"location":"how_to/how_to_run/","title":"Make a single run","text":"<p>A single simulation of a default county model configuration can be run as follows:</p> <pre><code>python -m emodpy_workflow.scripts.run -f FRAME -p PLATFORM -o OUTPUT -N SUITE_NAME\n</code></pre> <p>where</p> <ul> <li>FRAME is the name of a frame created with the \"new_frame\" command and has not been further modified</li> <li>PLATFORM is the idmtools.ini platform name to run on</li> <li>OUTPUT is the directory for storing the run receipt file</li> <li>SUITE_NAME is a meaningful name/description of suite (of one experiment, of one simulation) for identification.</li> </ul>"},{"location":"how_to/how_to_sweep/","title":"Sweep parameters","text":""},{"location":"how_to/how_to_sweep/#create-a-scenario-or-sweep","title":"Create a scenario or sweep","text":"<p>A scenario is a \"what if\" variation applied on top of a frame configuration. To create a scenario, first create a sweep file to define a set of hyperparameter value overrides for the scenario.</p> <p>For example, if you want to define a scenario modifying the Base_Infectivity and  condom_usage_max--COMMERCIAL-ALL-NODES hyperparameter values of a frame named baseline, the following will create one suite containing one experiment of one simulation, applying the specified overrides to the baseline frame configuration.</p> <ol> <li> <p>Create a file named sweeps.py containing the following:</p> <pre><code>frame_name = 'baseline'\n\nparameter_sets = {\n    frame_name: {\n        'sweeps': [{'experiment_name': \"Base_Infectivity_and_condom_usage_max_scenario\",\n                    'Base_Infectivity': 0.0008,\n                    'condom_usage_max--COMMERCIAL-ALL-NODES': 0.5}]\n    }\n}\n</code></pre> </li> <li> <p>Run:</p> <pre><code>python -m emodpy_workflow.scripts.run -f baseline -p PLATFORM -o OUTPUT -N BaseInfectivityAndCondomMaxScenario -w sweeps.py\n</code></pre> <p>... where PLATFORM is the idmtools.ini platform name to run on and  OUTPUT is the directory for storing the run receipt  file.</p> </li> </ol>"},{"location":"how_to/how_to_sweep/#create-a-set-of-sweeps","title":"Create a set of sweeps","text":"<p>First, please see Create a scenario or sweep. Then use the following for sweeps.py instead, which  will create one suite containing three experiments of one simulation, applying the specified overrides to the baseline frame configuration.</p> <ol> <li> <p>Create a file named sweeps.py containing the following:</p> <pre><code>frame_name = 'baseline'\n\nparameter_sets = {\n    frame_name: {\n        'sweeps': [{'experiment_name': \"Base_Infectivity_and_condom_usage_max_scenario_1\",\n                    'Base_Infectivity': 0.0008,\n                    'condom_usage_max--COMMERCIAL-ALL-NODES': 0.5},\n                {'experiment_name': \"Base_Infectivity_and_condom_usage_max_scenario_2\",\n                    'Base_Infectivity': 0.0006,\n                    'condom_usage_max--COMMERCIAL-ALL-NODES': 0.7},\n                {'experiment_name': \"Base_Infectivity_and_condom_usage_max_scenario_3\",\n                    'Base_Infectivity': 0.0004,\n                    'condom_usage_max--COMMERCIAL-ALL-NODES': 0.9}\n                ]\n    }\n}\n</code></pre> </li> <li> <p>Run:</p> <pre><code>python -m emodpy_workflow.scripts.run -f baseline -p PLATFORM -o OUTPUT -N BaseInfectivityAndCondomMaxScenarios3 -w sweeps.py\n</code></pre> <p>... where PLATFORM is the idmtools.ini platform name to run on and  OUTPUT is the directory for storing the run receipt  file.</p> </li> </ol>"},{"location":"how_to/how_to_sweep/#use-a-sweep-to-explore-hyperparameter-sensitivity-of-a-frame","title":"Use a sweep to explore hyperparameter sensitivity of a frame","text":"<p>To create a set of simulations that differ only by the value of a single hyperparameter, first create a sweep file to  designate a set of values for the chosen hyperparameter.</p> <p>For example, if you want to explore the sensitivity of the hyperparameter formation_rate--INFORMAL in a frame named baseline with 5 different values, the following will create one suite containing five experiments with one simulation each, using 5 different formation_rate--INFORMAL values.</p> <ol> <li> <p>Create a file named formation_rate_sweeps.py containing the following (first three rows can be adjusted as needed):</p> <pre><code>frame_name = 'baseline'\nexperiment_name_template = \"formation_rate--INFORMAL_sensitivity_%g\"\nformation_rates = [0.0001, 0.0002, 0.0003, 0.0004, 0.0005]\n\nparameter_sets = {\n    frame_name: {\n        'sweeps': [{'experiment_name': experiment_name_template % rate, 'formation_rate--INFORMAL': rate}\n                for rate in formation_rates]\n    }\n}\n</code></pre> </li> <li> <p>Run:</p> <pre><code>python -m emodpy_workflow.scripts.run -f baseline -p PLATFORM -o OUTPUT -N BaselineInformalFormationRate5 -w formation_rate_sweeps.py\n</code></pre> <p>... where PLATFORM is the idmtools.ini platform name to run on and  OUTPUT is the directory for storing the run receipt  file.</p> </li> </ol>"},{"location":"how_to/how_to_sweep/#use-a-sweep-to-explore-internal-variability-of-a-frame","title":"Use a sweep to explore internal variability of a frame","text":"<p>Internal model variability is the variation due solely to the random number sequence used. To create a set of simulations with identical configuration but with varied random number sequences (Run_Number hyperparameter), first  create a sweep file to designate a set of Run_Number values to utilize, one per simulation.</p> <p>For example, if you want to explore the internal variability of a frame named baseline with 25 simulations,  the following will create one suite containing 25 experiments with one simulation each, using 25 different Run_Number  values.</p> <ol> <li> <p>Create a file named run_number_sweeps.py containing the following (first three rows can be adjusted as needed):</p> <pre><code>frame_name = 'baseline'\nn_simulations = 25\nexperiment_name_template = \"internal_variability_run_number_%d\"\n\nrun_numbers = range(n_simulations)\nparameter_sets = {\n    frame_name: {\n        'sweeps': [{'experiment_name': experiment_name_template % rn, 'Run_Number': rn} \n                for rn in run_numbers]\n    }\n}\n</code></pre> </li> <li> <p>Run:</p> <pre><code>python -m emodpy_workflow.scripts.run -f baseline -p PLATFORM -o OUTPUT -N BaselineInternalVariability25 -w run_number_sweeps.py\n</code></pre> <p>... where PLATFORM is the idmtools.ini platform name to run on and  OUTPUT is the directory for storing the run receipt  file.</p> </li> </ol>"},{"location":"how_to/how_to_sweep/#run-a-sweep-with-a-calibrated-frame","title":"Run a sweep with a calibrated frame","text":"<p>Running scenarios on top of a calibrated frame requires using the run command with both a resampled CSV file (from the resample command) and a scenario sweep file as input. Every parameter set in the resampled CSV file will form  the basis for a simulation in every scenario.</p> <p>For example, to run a set of three scenarios varying a couple of coinfection hyperparameters (including one no-change  scenario) using the baseline frame on the ContainerPlatform:</p> <p>Assume resampled_parameter_sets.csv file exists with 200 calibrated parameter sets.</p> <ol> <li> <p>Create a file named sweeps.py containing the following:</p> <pre><code>parameter_sets = {\n    'baseline': {\n        'sweeps': [\n            {'experiment_name': 'higher_coinfection', 'coinfection_coverage_HIGH': 0.5, 'coinfection_coverage_LOW': 0.4},\n            {'experiment_name': 'lower_coinfection', 'coinfection_coverage_HIGH': 0.2, 'coinfection_coverage_LOW': 0.02},\n            {},  # This runs with no modifications over the baseline and is auto-named \"baseline\"\n        ]\n    }\n}\n</code></pre> </li> <li> <p>Run:</p> <pre><code>python -m emodpy_workflow.scripts.run -f baseline -p ContainerPlatform -o OUTPUT -N SUITE_NAME -s resampled_parameter_sets.csv -w sweeps.py\n</code></pre> <p>... where OUTPUT is the directory for storing the run receipt file and SUITE_NAME is a meaningful name/description of the suite created. The result will be one suite of three experiments each with 200 simulations (600 simulations in total). Each simulation in a given experiment will use a different calibrated  parameter set, overridden by the specific parameters in the corresponding sweeps.py experiment entry..</p> </li> </ol>"},{"location":"how_to/how_to_use_elements_in_frame/","title":"Use elements in a frame","text":""},{"location":"how_to/how_to_use_elements_in_frame/#add-additional-config-elements","title":"Add additional config elements","text":"<p>To add a new hyperparameter to the config, add a new ParameterizedCall to config.py in the chosen frame.</p> <p>For example, to add a hyperparameter named Base_Infectivity that allows modification to the same-named EMOD-HIV  config parameter in a frame named baseline:</p> <ol> <li> <p>Add the following new function to frames/baseline/config.py:</p> <pre><code>def modify_base_infectivity(config, Base_Infectivity: int = None):\n    if Base_Infectivity is not None:\n        config.parameters.Base_Infectivity = Base_Infectivity\n</code></pre> </li> <li> <p>In the same frames/baseline/config.py file, modify the function get_config_parameterized_calls by adding lines similar to line 5 and 6 below.  Line 5 will create a ParameterizedCall object using the new function and line 6 will add it to the list of config ParameterizedCalls.</p> <pre><code>def get_config_parameterized_calls(config: ReadOnlyDict) -&gt; List[ParameterizedCall]:\n    parameterized_calls = country_model.get_config_parameterized_calls(config=config)\n\n    # Add any additional ParameterizedCalls here\n    pc = ParameterizedCall(func=modify_base_infectivity, hyperparameters={'Base_Infectivity': None})\n    parameterized_calls.append(pc)\n\n    return parameterized_calls\n</code></pre> <p>The hyperparameter named Base_Infectivity will now be available for use.</p> </li> </ol>"},{"location":"how_to/how_to_use_elements_in_frame/#add-additional-campaign-elements","title":"Add additional campaign elements","text":"<p>To add a new campaign element (often an intervention), create and add an appropriate intervention  object in a function and then add a new ParameterizedCall using it in the campaign.py of the chosen frame.</p> <p>For example:</p> <ol> <li> <p>Assume you created a new frame using the extend_frame command and called it hiv_vaccine.</p> </li> <li> <p>Add the following new function creating a vaccine intervention to frames/hiv_vaccine/campaign.py:</p> <pre><code>from emodpy_hiv.campaign.individual_intervention import ControlledVaccine\nfrom emodpy_hiv.campaign.distributor import add_intervention_triggered\nfrom emodpy_hiv.campaign.waning_config import Constant\n\ndef add_hiv_vaccine(campaign: emod_api.campaign, vaccine_efficacy: float = 1.0):\n    hiv_vaccine = ControlledVaccine(campaign=campaign,\n                                    waning_config=Constant(constant_effect=vaccine_efficacy))\n    add_intervention_triggered(campaign=campaign,\n                            intervention_list=[hiv_vaccine],\n                            triggers_list=[\"STIDebut\"],\n                            start_year=2030)\n    return campaign\n</code></pre> </li> <li> <p>In the same frames/hiv_vaccine/campaign.py file, modify the function get_campaign_parameterized_calls by adding lines similar to line 5 and 6 below.  Line 5 will create a ParameterizedCall object using the new function and line 6 will add it to the list of campaign ParameterizedCalls.</p> <pre><code>def get_campaign_parameterized_calls(campaign: emod_api.campaign) -&gt; List[ParameterizedCall]:\n    parameterized_calls = source_frame.model.campaign_parameterizer(campaign=campaign)\n\n    # Add any additional ParameterizedCalls here\n    pc = ParameterizedCall(func=add_hiv_vaccine, hyperparameters={'vaccine_efficacy': None})\n    parameterized_calls.append(pc)\n\n    return parameterized_calls\n</code></pre> <p>The hyperparameter named vaccine_efficacy will now be available for use.</p> </li> </ol>"},{"location":"how_to/how_to_use_elements_in_frame/#replace-a-campaign-or-demographics-element-of-a-frame","title":"Replace a campaign or demographics element of a frame","text":"<p>To override an element of an EMOD-HIV campaign or demographics, create a Python subclass of the country model you want to use and add overriding function(s) of the same name(s) to the country model functions you want to replace.</p> <p>For example, creating a Python country model subclass named ZambiaModified using an alternate  add_state_TestingOnChild6w function for the Zambia model campaign in frame zambia_modified. </p> <ol> <li> <p>Use the new_frame command to create a fresh Zambia country model starting point (see Create a new frame):</p> <pre><code>python -m emodpy_workflow.scripts.new_frame --country Zambia --dest zambia_modified\n</code></pre> </li> <li> <p>Update the original Zambia country model import near the top:</p> <p>Replace the following line:</p> <pre><code>from emodpy_hiv.countries import Zambia as country_model\n</code></pre> <p>with</p> <pre><code>from emodpy_hiv.countries import Zambia\n</code></pre> </li> <li> <p>Add the following new Zambia country model Python subclass in frames/zambia_modified/campaign.py containing the desired override/replacement. The additional naming line at the end updates the rest of the file to use the new country model.</p> <p>In this example, we are copy/pasting the original Zambia add_state_TestingOnChild6w function and modifying the  internal child_testing_time_value_map values to be two years earlier than the original:</p> <pre><code>class ZambiaModified(Zambia):\n    @classmethod\n    def add_state_TestingOnChild6w(cls,\n                                campaign: emod_api.campaign,\n                                node_ids: Union[List[int], None] = None):\n        child_testing_start_year = 2002\n        child_testing_time_value_map = {\"Times\": [2002, 2003, 2004, 2006, 2007],\n                                        \"Values\": [0, 0.03, 0.1, 0.2, 0.3365]}\n        disqualifying_properties = [coc.CascadeState.LOST_FOREVER,\n                                    coc.CascadeState.ON_ART,\n                                    coc.CascadeState.LINKING_TO_ART,\n                                    coc.CascadeState.ON_PRE_ART,\n                                    coc.CascadeState.LINKING_TO_PRE_ART,\n                                    coc.CascadeState.ART_STAGING,\n                                    coc.CascadeState.TESTING_ON_SYMPTOMATIC]\n        property_restrictions = 'Accessibility:Yes'\n        coc.add_state_TestingOnChild6w(campaign=campaign,\n                                    disqualifying_properties=disqualifying_properties,\n                                    time_value_map=child_testing_time_value_map,\n                                    node_ids=node_ids,\n                                    property_restrictions=property_restrictions,\n                                    start_year=child_testing_start_year)\n\ncountry_model = ZambiaModified\n</code></pre> <p>The frame zambia_modified now is identical to a Zambia country model frame but with the targeted section of the campaign replaced.</p> </li> </ol> <p>The process for replacing demographics elements is identical, but frames/zambia_modified/demographics.py is edited  instead.</p>"},{"location":"how_to/how_to_use_elements_in_frame/#specify-an-ingest-form-for-a-frame","title":"Specify an ingest form for a frame","text":"<p>The way to specify the ingest form to use for all frames in a project is by editing the ingest_filename attribute in its manifest.py file.</p> <p>For example:</p> <pre><code>ingest_forms_dir = os.path.join(os.getcwd(), 'calibration', 'ingest_forms')\ningest_filename = os.path.join(ingest_forms_dir,\n    'Zambia_calibration_ingest_form_2022-05-19__source__edited_for_calibration_testing--ALL_NODE.xlsm')\n</code></pre> <p>... sets the ingest file to use to be the file at path:</p> <p>&lt;project_directory&gt;/calibration/ingest_forms/Zambia_calibration_ingest_form_2022-05-19__source__edited_for_calibration_testing--ALL_NODE.xlsm</p> <p>To override this ingest_filename path for a specific frame only requires an edit to the chosen frame's EMOD_HIV object specification in its __init__.py file. Change \"manifest.ingest_filename\" below in your chosen frame to the desired path:</p> <pre><code>model = EMOD_HIV(\n    manifest=manifest,\n    config_initializer=config.initialize_config,\n    config_parameterizer=config.get_config_parameterized_calls,\n    demographics_initializer=demographics.initialize_demographics,\n    demographics_parameterizer=demographics.get_demographics_parameterized_calls,\n    campaign_initializer=campaign.initialize_campaign,\n    campaign_parameterizer=campaign.get_campaign_parameterized_calls,\n    ingest_form_path=manifest.ingest_filename,  # &lt;-- change the value here for single-frame update only\n    build_reports=config.build_reports\n)\n</code></pre>"},{"location":"reference/age_bin_format/","title":"Ingest Form Age Bin Format","text":"<p>The ingest form uses a particular format for age bins. These age bins are used on multiple sheets: Site,  Analyzers, and observational data sheets.</p> <p>The format is left-inclusive and right-exclusive, and specified exactly as follows with no whitespace:</p> <pre><code>[MIN:MAX)\n</code></pre> <p>Age bins are interpreted as: MIN &lt;= age &lt; MAX</p> <p>Important</p> <p>MIN and MAX ages in an age bin must be integers.</p> <p>For example, the following specifies: 15 &lt;= age &lt;50 (e.g., 15, 20.5, 49.999 are included, but not 14.9, 50, or 75.5)</p> <pre><code>[15:50)\n</code></pre>"},{"location":"reference/commands/","title":"Commands","text":"<p>Warning</p> <p>All commands are intended to be run in a project directory. This is the  directory that directly contains your frames directory, manifest.py, and idmtools.ini file.</p> <p>All commands can be run via:</p> <pre><code>python -m emod_workflow.scripts.COMMAND_NAME_HERE &lt;ARGUMENTS_HERE&gt;\n</code></pre> <p>Information on command arguments and their usage is available via:</p> <pre><code>python -m emod_workflow.scripts.COMMAND_NAME_HERE --help\n</code></pre>"},{"location":"reference/commands/#new_project","title":"<code>new_project</code>","text":"<p>Creates a basic project directory with default files and settings. Platform-specific settings/files may still need to be set/obtained. </p>"},{"location":"reference/commands/#new_frame","title":"<code>new_frame</code>","text":"<p>Creates a new frame that imports and uses a defined emodpy-hiv country model which can then be altered or extended.</p>"},{"location":"reference/commands/#extend_frame","title":"<code>extend_frame</code>","text":"<p>Imports the input builders of an existing frame, which can then be altered or extended (without modifying the source frame).</p>"},{"location":"reference/commands/#available_parameters","title":"<code>available_parameters</code>","text":"<p>Lists all currently defined and available hyperparameters of a specified frame. These are available for alteration by a user during calibration and scenarios if they so choose.</p>"},{"location":"reference/commands/#calibrate","title":"<code>calibrate</code>","text":"<p>Calibrates a model specified in a frame to its reference data specified in a \"calibration ingest form\".</p>"},{"location":"reference/commands/#resample","title":"<code>resample</code>","text":"<p>Selects one or more parameter sets (samples) from a calibration process. These parameter sets are the model calibration.  They can be used later on in scenarios when using the <code>run</code> command.</p>"},{"location":"reference/commands/#run","title":"<code>run</code>","text":"<p>Runs model simulations. Calibration samples and/or sweeps files can be provided as input as appropriate. </p>"},{"location":"reference/commands/#download","title":"<code>download</code>","text":"<p>Obtains specified output file(s) from previously run simulations and puts them into a structured local directory.</p>"},{"location":"reference/commands/#plot_sims_with_reference","title":"<code>plot_sims_with_reference</code>","text":"<p>Plots model output against reference data to aid in calibration.</p>"},{"location":"reference/dtktools_comparison/","title":"emodpy-workflow vs DtkTools","text":"<p>If you have already been using EMOD-HIV via DtkTools, this overview will explain what is the same and what is different.</p> <p>Even though emodpy-workflow is designed to be a general workflow tool, its development was driven by the need to port the pre-existing EMOD-HIV workflow tools using DtkTools to idmtools and emodpy. As such, every feature of the prior workflow has been replicated. There is nothing that could be done in DtkTools that cannot be done with emodpy-workflow.</p> <p>For those already familiar with the DtkTools EMOD-HIV workfow, this section highlights  the correspondence of its components and features with those of emodpy-workflow.  Bolded items have changed the most.</p> DtkTools emodpy-workflow EMOD JSON input files country models (from emodpy-hiv) directories of templated JSON input files frames JSON KP tag parameters ParameterizedCalls (from emodpy-hiv) optim_script.py (calibration and configuration) built-in calibrate command ingest form (reference data and calibration configuration) ingest form (still used, little changed) calibration resampling via run_scenarios.py built-in resample command resampled_parameter_sets.csv resampled_parameter_sets.csv (same format) run_scenarios.py (scenario running tool) built-in run and download commands scenarios.csv sweeps.py file format"},{"location":"reference/dtktools_comparison/#country-models","title":"Country models","text":"<p>Country models are Python classes that define the default \"baseline\" behavior of an EMOD-HIV configuration. They often correspond to countries, but can be localized regions of interest. They contain all information (Python functions) needed to build a default set of EMOD-HIV inputs (config, demographics, campaign).</p> <p>Country models are standard Python code and live in the emodpy-hiv repository. Usage of country models in a project is the domain of frames.</p>"},{"location":"reference/dtktools_comparison/#frames","title":"Frames","text":"<p>Frames are a construct in emodpy-workflow that replace directories of KP-tagged (templated) JSON files in a project. A frame is the central point where all Python code for building EMOD-HIV config, demographics, and campaign inputs is found by emodpy-workflow commands. Frames can import and extend other frames to eliminate inconsistencies. With JSON, one had to copy and modify files, creating duplicate information that could desynchronize.</p> <p>For example, one could have a baseline frame and several scenario frames that import the baseline and then add campaign interventions.</p> <p>Warning</p> <p>Updating any frame automatically updates all dependent frames.</p>"},{"location":"reference/dtktools_comparison/#parameterized-calls","title":"Parameterized calls","text":"<p>ParameterizedCalls are Python objects that directly replace the functionality of JSON KP tags. ParameterizedCall objects let a user define a \"hyperparameter\" (an arbitrary string name) that connects to an arbitrary point in the EMOD-HIV input building code to allow modification during calibration and scenarios. Users can add contextual labels to ParameterizedCalls to distinguish very specific values as could be done with KP tags.</p> <p>For example, instead of this KP-tagged parameter name:</p> <pre><code>Society__KP_Central.TRANSITORY.Relationship_Parameters.Condom_Usage_Probability.Max \n</code></pre> <p>... one could create a ParameterizedCall hyperparameter named the following:</p> <pre><code>condom_usage_max--COMMERCIAL-Central\n</code></pre> <p>... which uses a contextual label of \"COMMERCIAL-Central\"</p> <p>One can also tie multiple values together by reusing (in Python code) a hyperparameter name with identical context.</p> <p>For example, one could define and reuse a ParameterizedCall hyperparameter that connects to each model node individually</p> <pre><code>condom_usage_max--COMMERCIAL-ALL-NODES\n</code></pre> <p>... which would then apply any value changes to all nodes for COMMERCIAL relationships.</p> <p>Each country model defines a starting set of ParameterizedCalls and hyperparameters for use. Additional ones can be added to project frames.</p>"},{"location":"reference/dtktools_comparison/#ingest-forms","title":"Ingest forms","text":"<p>Ingest forms are still used for specifying observational reference data and configuring analyzers used in the calibration process. There is virtually no difference in its usage.</p> <p>The only sheet in an older ingest form that would need updating for use is the  Model Parameters sheet:</p> <ul> <li>map_to column can be present but now ignored</li> <li>name column values will need updating to new hyperparameter names from old KP-tag parameter names.</li> </ul>"},{"location":"reference/dtktools_comparison/#sweep-files","title":"Sweep files","text":"<p>Scenario CSV files (like scenarios.csv) has been replaced with a new sweep Python file format. Instead of rows of parameter overrides with parameter-named columns, one defines lists of hyperparameter/value dictionary overrides.  Because the file is Python instead of csv, one can utilize code to simplify the generation of complex or repetitive sets of overrides.</p> <p>For example, instead of: <pre><code>Scenario,Campaign,Base_Infectivity\nbaseline,campaign.json,\nhigh_infectivity,campaign.json,0.1\nlow_infectivity,campaign.json,0.001\n</code></pre></p> <p>... one would define: <pre><code>parameter_sets = {\n    #  This indicates experiments start with the baseline frame\n    'baseline': {\n        'sweeps': [\n            {},  # This runs with no modifications over the baseline and is auto-named \"baseline\"\n            {'experiment_name': 'higher_infectivity', 'Base_Infectivity': 0.1},\n            {'experiment_name': 'lower_infectivity', 'Base_Infectivity': 0.001},\n        ]\n    }\n}\n</code></pre></p>"},{"location":"reference/filling_an_ingest_form/","title":"Filling an Ingest Form","text":"<p>An ingest form is a multi-sheet Excel spreadsheet that organizes reference data and sets analysis controls for the <code>calibrate</code> command. It controls the non-iterative aspects of a calibration process, while the <code>calibrate</code> command arguments control iteration. It is a central component of every emodpy-workflow project.</p> <p>This tutorial guides the filling of a blank ingest form. One is added to every project created by the <code>new_project</code> command at <code>calibration/ingest_forms/calibration_ingest_form.xlsm</code>.</p>"},{"location":"reference/filling_an_ingest_form/#ingest-form-sheets","title":"Ingest Form Sheets","text":"<p>All colored spaces on all sheets are utilized by emodpy-workflow. The colors themselves do not matter, but the default colored space denotes which sheet cells are interpreted. Any default white space is not interpreted and can be used for anything, for example, calculations, notes, etc.</p> <p>Important</p> <p>Default-colored spaces in an ingest form are interpreted by emodpy-workflow and default white spaces are not.</p> <p>Excel formulas are not allowed in any interpreted cells, as they cannot be processed by emodpy-workflow. In order to  use formula-derived values in an interpreted cell, one should perform the calculation in uninterpreted white space and then copy-paste-by-value into the interpreted cells</p> <p>Important</p> <p>Interpreted cells in an ingest form can only contain values, never formulas.</p>"},{"location":"reference/filling_an_ingest_form/#site-sheet","title":"Site Sheet","text":"<p>The Site sheet contains information that is required for mapping reference obvervational data to the calibration simulations.</p> <ul> <li>Site_name: Users can set this to anything</li> </ul> <p>The following values are used for scaling the simulation populations to real-world values in order to make model results comparable to count-based observations.</p> <ul> <li>Population: Integer number of people</li> <li>Year: The integer year containing this population</li> <li>Age bin: The age bin of the population count. See age bin format reference for details.</li> </ul> <p>The following values tell EMOD how to map place names used in observations to model nodes.</p> <ul> <li>Node number: The integer id to use for the simulation nodes, must be at least 1.</li> <li>Node name: The name of the node with the corresponding node number.</li> </ul> <p>Important</p> <p>The node numbers and names must correspond exactly to the demographics data being used. Please refer to the country model demographics code that will be used.</p> <p>The following example indicates that the ingest form is for a 10-node EMOD Zambia project, utilizing 2015 population counts of all individuals 0 &lt;= age &lt; 100 for simulation scaling purposes.</p> <p></p>"},{"location":"reference/filling_an_ingest_form/#observations-metadata","title":"Observations metadata","text":"<p>The Observations metadata sheet serves as the beginning of generating the observations sheets. All observational data channels that will be entered in the ingest form must be entered on this sheet as a \"Data Channel\". The current accepted values are:</p> <ul> <li>Population</li> <li>Prevalence</li> <li>OnART</li> <li>Incidence</li> <li>ARTCoverage (or alternately, ARTPrevalence)</li> </ul> <p>For each channel specified, the corresponding scaling-type must be set from the drop-down menus, either  Scaling or Non-scaling. Scaling means the data channel scales with population (for example, a population count) and Non-scaling means it does not (for example, a population fraction).</p> <p>The sheets for recording observational data for use with calibration are generated by an Excel macro using data on this sheet to help ensure data consistency in the ingest form. The ingest form how-to  guide details use of the macro.</p> <p></p>"},{"location":"reference/filling_an_ingest_form/#macro-generated-observation-sheets","title":"Macro-generated Observation Sheets","text":"<ol> <li> <p>Define data stratification and uncertainty data channel</p> <p>Each observation sheet starts blank and requires the user to specify observational data stratifiers and the type of data uncertainty that will be specified.</p> <p>Though the ingest form itself supports any arbitrary stratifier, the emodpy-workflow code that interprets it does not.  For now, the stratifiers should always be (case-sensitive):</p> <ul> <li>Year: the integer year for the data row.</li> <li>Province: The name of the province/node of the data. This must match a node name on the Site sheet if data is node-specific. If the data is simulation-wide (all-node, usually country-wide), enter All.</li> <li>Gender: Male, Female, or Both.</li> <li>AgeBin: The age range of the data row in the standard age bin format.</li> </ul> <p>Additional columns starts with three values:</p> <ul> <li>weight: Numerical multiplier &gt;= 0.0, blank means 1.0. Alters the importance of the row in calibration scoring.</li> <li>two_sigma: 2 standard errors of count-type data. Delete from \"Additional columns\" if using fractional data (specified as Scaling).</li> <li>effective_count: Number of independent measurements (people). Delete from \"Additional columns\" if using count data (specified as Non-scaling).</li> </ul> <p>Important</p> <p>A user must delete either two_sigma or effective_count for the data entry grid to be valid.</p> </li> <li> <p>Generate the data table</p> <p>The data table for recording observational data on an observation sheet is generated by an Excel macro to help ensure data consistency.</p> <p>The ingest form how-to guide details use of the macro.</p> </li> <li> <p>Enter data in the data table</p> <p>Any number of rows in the generated data table can be filled and gaps between rows are ok.</p> <p>Every element of a used row must be filled, with the exception of weight, which can be left blank (default 1.0).</p> <p>The only invalid data entry is a value of zero (count or fraction), as this causes errors in calibration. Simply delete such rows or cut/paste such rows into uninterpreted sheet space as documentation.</p> <p>Important</p> <p>Do not add data values of 0. Just omit them or put them elsewhere in the observation sheet.</p> <p>All fractional data (for example, Prevalence) must be between 0.0 and 1.0 (not percent).</p> <p>Important</p> <p>All non-scaling, population fractional data must be entered as a float between 0.0 and 1.0 .</p> <p></p> </li> </ol>"},{"location":"reference/filling_an_ingest_form/#analyzers-sheet","title":"Analyzers Sheet","text":"<p>The Analyzers sheet tells the calibration iteration algorithm how to score each calibration simulation. Each row in the colored/interpreted space represents a component of the score to compute. The column meanings are as follows:</p> <ul> <li>Channel: The data channel to score. Requires observation data of this channel in the ingest form.</li> <li>Distribution: The type of uncertainty distribution for the observational data. Choose Gaussian for count-type observations with a two_sigma uncertainty channel and Beta for fractional observations with an  effective_count uncertainty channel.</li> <li>Provinciality: Whether per-node (Provincial) or all-node (Non-provincial) data will be scored.</li> <li>Age bins: The age bins of data to score. Choose All matching for all observation/simulation matching age bins or Custom to define a subset.</li> <li>Custom age bins: If using Custom age bin scoring, this cell contains a comma-separated list of one or more age bins in the standard age bin format.</li> <li>Weight: How heavily to consider the score of each particular analyzer. The weights of all anlayzers will be normalized  and are multipliers (0.0 to 1.0) on the individual analyzer scores.</li> </ul> <p>Important</p> <p>For clarity, it is recommended the weights sum to 1.0 .</p> <p>The following example defines six differnt analyzers to use in the scoring of each calibration simulation. It mixes  multiple different channels of data, some counting and some fractional, some per-node and some all-node. Note that there are two Prevalence analyzers, one for per-node and one for all-node data; multiple analyzers per channel is a supported feature.</p> <p>Important</p> <p>Multiple analyzers per channel using different observational subsets is supported.</p> <p></p>"},{"location":"reference/filling_an_ingest_form/#model-parameters-sheet","title":"Model Parameters Sheet","text":"<p>The Model Parameters sheet tells the calibration iteration algorithm which hyperparameters it can alter during  calibration to find better model fits to the provided observations. Each row specifies a hyperparameter and its limits:</p> <ul> <li>name: The hyperparameter name (including its label, if applicable).</li> <li>dynamic: Should always be TRUE. Only exists for back-compatibility purposes.</li> <li>initial_value: The value to use for the hyperparameter at the very beginning of a calibration process. It must be within the specified min and max values: min &lt;= initial_value &lt;= max.</li> <li>min: The minimum value the calibration algorithm can use. Must be less than max.</li> <li>max: The maximum value the calibration algorighm can use. Must be greater than min.</li> <li>map_to: If present, only exists for back-compatibility purposes. Does not need to be filled.</li> </ul> <p>Information about definining and using hyperparameters is covered in the  using parameterized calls tutorial.</p> <p>Finding currently available hyperparameters is detailed in the  how to list hyperparameters guide.</p> <p>The following example specifies 40 different hyperparameters (with their labels) for use with calibration.</p> <p></p>"},{"location":"reference/filling_an_ingest_form/#specifying-an-ingest-form-for-use-in-a-project","title":"Specifying an ingest form for use in a project","text":"<p>An ingest form is specified for use with calibration via an entry in project-level file <code>manifest.py</code>, detailed in the project reference.</p>"},{"location":"reference/frames/","title":"Frames","text":"<p>A frame is a standard input to emodpy-workflow commands that functions as an interface to model input definition, discovery, and execution.</p> <p>In particular, a frame defines:</p> <ul> <li>The model to be used (EMOD-HIV)</li> <li>Functions that initialize the model inputs</li> <li>Functions that define how to build inputs after initialization</li> <li>Available hyperparameters and how they modify model input building</li> <li>Reference observational data (for calibration)</li> </ul> <p>Frames are designed to make it simple to extend them via code reuse similar to class inheritance in object oriented design. This enables a project to contain a \"family tree\" of frames, automatically propagating updates from \"parent\" frames to their descendants for frame and scenario consistency.</p> <p>The built-in commands <code>new_frame</code> and <code>extend_frame</code> are convenience methods for generating new frames for use. They are not strictly necessary to create a frame (they can be \"handmade\"). A frame simply needs to have one attribute,  model, in its <code>__init__.py</code> file, where the value of model is an object of a descendent class of IModel.</p>"},{"location":"reference/frames/#initpy","title":"init.py","text":"<p>A sample EMOD HIV frame <code>__init__.py</code> generated by the <code>new_frame</code> command:</p> <pre><code># This frame built via command:\n# python -m emodpy_workflow.scripts.new_frame\n\nfrom emodpy_workflow.lib.models.emod_hiv import EMOD_HIV\nfrom emodpy_workflow.lib.utils.runtime import load_manifest\n\n# The manifest contains input file pathing information for the project\nmanifest = load_manifest()\n\n# EMOD contains three main configuration objects: config, demographics, and\n# campaign. The related information for generating these input objects is\n# placed into concern-specific files in this directory.\nfrom . import config\nfrom . import demographics\nfrom . import campaign\n\n# 'model' is a required attribute of this file. All commands access frames\n# by loading the 'model' attribute.  The model attribute is assigned a\n# model- and disease-specific object that contains all information regarding \n# how to build the inputs for the model and generating its command line for\n# execution.\nmodel = EMOD_HIV(\n    manifest=manifest,\n    config_initializer=config.initialize_config,\n    config_parameterizer=config.get_config_parameterized_calls,\n    demographics_initializer=demographics.initialize_demographics,\n    demographics_parameterizer=demographics.get_demographics_parameterized_calls,\n    campaign_initializer=campaign.initialize_campaign,\n    campaign_parameterizer=campaign.get_campaign_parameterized_calls,\n    ingest_form_path=manifest.ingest_filename,\n    build_reports=config.build_reports\n)\n</code></pre>"},{"location":"reference/projects/","title":"Projects","text":"<p>emodpy-workflow is organized around \"projects\". A \"project\" is a structured directory containing information related to model definition, inputs building, observational data, and scientific scenarios. In other words, it contains all data  for a related set of model configurations and any output obtained for analysis.</p> <p>Warning</p> <p>All commands must be run with a project directory as the current directory.</p> <p>The minimum required components of a project are detailed below.</p>"},{"location":"reference/projects/#manifestpy","title":"manifest.py","text":"<p>&lt;project_dir&gt;/manifest.py : This file specifies the pathing needed for the model executable to be run by the built-in commands as well as ingest form location for calibration. For EMOD-HIV, the required attributes (paths) that must be set are:</p> <ul> <li>ingest_filename : Path to a default ingest form to use for calibration of any frame in the project.</li> <li>executable_path : Path to the EMOD-HIV binary to use for all frames in the project.</li> <li>schema_path : Path to the schema.json file compatible with the specified EMOD-HIV binary.</li> <li>asset_collection_of_container : If the platform you intend to run simulations on requires the specification and use of a .sif file (for Singularity) then specify the path to an appropriate .sif file here. Otherwise, specify <code>None</code>.</li> <li>post_processing_path : The path of a dtk_post_process.py file to use with EMOD-HIV. <code>standard</code> means to use a built-in post-processing script and <code>None</code> means to skip post-processing. Post-processing is only required for  calibration of EMOD-HIV.</li> <li>pre_processing_path : The path of a dtk_pre_process.py file to use with EMOD-HIV. <code>standard</code> means to use a built-in pre-processing script and <code>None</code> means to skip pre-processing. There is no current <code>standard</code> pre-processor  for EMOD-HIV.</li> <li>in_processing_path : The path of a dtk_in_process.py file to use with EMOD-HIV. <code>standard</code> means to use a built-in in-processing script and <code>None</code> means to skip in-processing. There is no current <code>standard</code> in-processor for  EMOD-HIV.</li> </ul>"},{"location":"reference/projects/#bin-directory","title":"bin directory","text":"<p>&lt;project_dir&gt;/bin : This is a directory intended to contain model executables and any required files related to their basic execution. When running EMOD-HIV, it is automatically created upon simulation creation (as needed) and is the  directory that your Eradication binary and schema will be automatically copied/installed into. It is also typically the  directory for a user to put any needed container (.sif) files for execution.</p>"},{"location":"reference/projects/#frames-directory","title":"frames directory","text":"<p>&lt;project_dir&gt;/frames : This is a directory that contains the frames in a project, where each frame is a subdirectory.  The frames directory will be created automatically as needed by the command new_frame.</p>"},{"location":"reference/projects/#idmtoolsini","title":"idmtools.ini","text":"<p>&lt;project_dir&gt;/idmtools.ini : This file configures the idmtools Platform object that manages the creation and running of simulations on compute resources. All commands that need to communicate with a compute resource (for execution, obtaining files, etc) accepts an idmtools.ini platform block name (like ContainerPlatform) via argument to identify which resource to utilize.</p> <p>The new_project command will automatically create one that can then be modified. Details of the file format can be found here.</p>"},{"location":"reference/reference_overview/","title":"Reference","text":"<p>The following items provide reference information on topics specific to using emodpy-workflow:</p> <ul> <li>Commands</li> <li>Projects</li> <li>Frames</li> <li>Sweeps</li> <li>emodpy-workflow vs DtkTools</li> <li>Filling an ingest form</li> <li>Ingest Form Age Bin Format</li> </ul>"},{"location":"reference/sweeps/","title":"Sweep files","text":"<p>A sweep file is a Python file that specifies sets of hyperparameter overrides, often referred to as \"scenarios\". Scenarios address specific scientific questions, typically (but not exclusively) related to predicting the outcome of potential interventions and events.</p> <p>These overrides are applied to simulation inputs building of specific frame(s) after any other parameter overrides (they have the highest precedence).</p> <p>Sweep file format by example:</p> <pre><code># A sweep Python file must contain a 'parameter_sets' attribute, which is a dict\n# with keys being names of frames and values being dicts of param_name:value\n# entries OR a generator of such dicts\nparameter_sets = {\n    # This key indicates the contained information is for building off\n    # the 'baseline' frame\n    'baseline': {\n        # Each dict in 'sweeps' list is a set of param: value overrides to\n        # be applied - a scenario.  Note that the parameter lists are arbitrary.\n        # Each scenario can include as many or few parameters as you want.\n        # One experiment will be created per entry in 'sweeps'\n        'sweeps': [\n            # Optional: A provided 'experiment_name' in a sweep entry will\n            # name the corresponding experiment. Default experiment name is the\n            # name of the frame.\n            {\n                'experiment_name': 'condom_maternal_higher',\n                'Condom_Transmission_Blocking_Probability': 0.9,\n                'Maternal_Infection_Transmission_Probability': 0.4\n            }, {\n                'experiment_name': 'condom_maternal_lower',\n                'Condom_Transmission_Blocking_Probability': 0.7,\n                'Maternal_Infection_Transmission_Probability': 0.2\n            }, {\n                'experiment_name': 'condom_higher',\n                'Condom_Transmission_Blocking_Probability': 0.9\n            },\n            {}  # This is a do nothing different, baseline scenario\n        ]\n    }\n}\n</code></pre>"},{"location":"reference/virtual_environments/","title":"Virtual Environments","text":""},{"location":"reference/virtual_environments/#why-use-virtual-environments","title":"Why use virtual environments","text":"<ul> <li>A virtual environment is a self-contained folder with its own Python interpreter and libraries. It\u2019s already part of python. </li> <li>It helps keep different projects isolated and organized.</li> <li>Avoids conflicts between project dependencies.</li> <li>Easily replicate environments across machines using requirements.txt or pyproject.toml files</li> <li>Test and run different projects using different versions of the same package.</li> <li>Try out new packages or upgrades without affecting global Python.</li> <li>Keeps your system environment clean and uncluttered.</li> </ul>"},{"location":"reference/virtual_environments/#how-to-use-virtual-environments","title":"How to use virtual environments","text":""},{"location":"reference/virtual_environments/#create-a-virtual-environment","title":"Create a virtual environment","text":"<pre><code>python -m venv myvenv\n</code></pre>"},{"location":"reference/virtual_environments/#activate-a-virtual-environment","title":"Activate a virtual environment","text":"WindowsMac/Linux <pre><code>myenv\\Scripts\\activate.bat\n</code></pre> <pre><code>source myenv/bin/activate\n</code></pre> <p>Now you\u2019re \u201cinside\u201d the environment</p>"},{"location":"reference/virtual_environments/#install-packages-into-the-virtual-environment","title":"Install packages into the virtual environment","text":"<p>Sometimes it is good to make sure PIP is up to date:</p> <pre><code>python -m pip install --upgrade pip\n</code></pre> <p>Now, you have an environment where you can install the latest version of emodpy-workflow!!!</p> <pre><code>pip install hiv-workflow \u2013extra-index-url=https://packages.idmod.org/api/pypi/pypi-production/simple\n</code></pre>"},{"location":"reference/virtual_environments/#deactivate-a-virtual-environment","title":"Deactivate a virtual environment","text":"<p>When you are done or need to switch to a different project, use the following command to exit the virtual environment:</p> <pre><code>deactivate\n</code></pre>"},{"location":"tutorials/create_project/","title":"Create Project","text":""},{"location":"tutorials/create_project/#objective","title":"Objective","text":"<p>The goal of this tutorial is to learn about \"projects\" and \"frames.\"  All the commands of emodpy-workflow must be used within a \"project\".  You will learn how to create a new project and the files that exist in a project.  Most of the other commands require a \"frame\".  A frame is an idea/scenario that involves changing parameters and/or code. You will learn how to create a frame in this tutorial.</p>"},{"location":"tutorials/create_project/#prerequisites","title":"Prerequisites","text":"<p>You must complete the setup and installation instructions before you can start this tutorial.</p>"},{"location":"tutorials/create_project/#general-command-format","title":"General command format","text":"<p>emodpy-workflow provides you with a collection of commands that allow you to perform the tasks of creating projects, running EMOD, calibrating, downloading data, and so on.  To use a command, you must be in the top-level directory of your project and type the command similarly to the following:</p> <pre><code>python -m emodpy_workflow.scripts.XXX &lt;arguments&gt;\n</code></pre> <p>Test that you can execute a command:</p> <pre><code>python -m emodpy_workflow.scripts.new_project -h\n</code></pre> <p>You should see output similar to the following:</p> <pre><code>usage: new_project.py [-h] -d DEST_DIR\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -d DEST_DIR, --directory DEST_DIR\n                        Path of new project directory to create and populate with initial files and subdirectories. Required.\n</code></pre> <p>If you see this, you are ready!!</p>"},{"location":"tutorials/create_project/#create-your-project","title":"Create your project","text":"<p>The 'new_project' command is use to create a new project directory.  It is assumed that all of the other commands will be executed in this project directory.</p> <p>Execute new_project command:</p> <pre><code>python -m emodpy_workflow.scripts.new_project -d my_project\n</code></pre> <p>When the command is finished, you should see something similar to the following:</p> <pre><code>Created new project directory: my_project\n</code></pre>"},{"location":"tutorials/create_project/#explore-what-is-in-the-project","title":"Explore what is in the project","text":"<p>Let's look into the directory that was just created and learn about what is in it and why.</p> <ol> <li> <p>Look at what is in our training directory by executing the following command:</p> WindowsLinux <pre><code>dir\n</code></pre> <pre><code>ls -l\n</code></pre> <p>You should see something similar to the following:</p> WindowsLinux <pre><code>Directory of C:\\work\\my_tutorial\n\n08/12/2025  09:28 AM    &lt;DIR&gt;          .\n08/12/2025  09:28 AM    &lt;DIR&gt;          ..\n08/11/2025  09:49 AM    &lt;DIR&gt;          env\n08/11/2025  09:54 AM    &lt;DIR&gt;          my_project\n</code></pre> <pre><code>total 8\ndrwxrwxr-x 5 dbridenbecker dbridenbecker 4096 Sep  4 19:48 env\ndrwxrwxr-x 3 dbridenbecker dbridenbecker 4096 Sep  4 19:49 my_project\n</code></pre> <ul> <li><code>env</code> - This folder is the one that contains our Python virtual environment. It contains all of the Python tools we need for running EMOD, plotting data, etc.</li> <li><code>my_project</code> - This is the folder we just created with the new_project command.  All future emodpy-workflow commands must be executed inside the <code>my_project</code> folder.</li> </ul> </li> <li> <p>Look at what is in the project directory by executing the following commands:</p> WindowsLinux <pre><code>cd my_project\ndir\n</code></pre> <pre><code>cd my_project\nls -l\n</code></pre> <p>You should see something similar to the following:</p> WindowsLinux <pre><code>Directory of C:\\work\\my_tutorial\\my_project\n\n08/12/2025  10:37 AM    &lt;DIR&gt;          .\n08/12/2025  10:37 AM    &lt;DIR&gt;          ..\n08/08/2025  02:41 PM             1,267 idmtools.ini\n08/11/2025  09:54 AM             3,542 manifest.py\n08/11/2025  09:54 AM               355 __init__.py\n08/11/2025  09:54 AM    &lt;DIR&gt;          __pycache__\n</code></pre> <pre><code>total 16\n-rw-rw-r-- 1 dbridenbecker dbridenbecker 1267 Sep  4 19:49 idmtools.ini\n-rw-rw-r-- 1 dbridenbecker dbridenbecker  355 Sep  4 19:49 __init__.py\n-rw-rw-r-- 1 dbridenbecker dbridenbecker 3542 Sep  4 19:49 manifest.py\ndrwxrwxr-x 2 dbridenbecker dbridenbecker 4096 Sep  4 19:49 __pycache__\n</code></pre> <ul> <li><code>idmtools.ini</code> - This file contains information about the computing platforms where you are running EMOD like where you want the simulation files to be created. The reference contains the details about this file.</li> <li><code>manifest.py</code> - This file contains information about how you are running EMOD, like where the EMOD binary is stored and if you are using simulation post processing. The reference contains the details about this file.</li> <li><code>__init__.py</code> - A normal Python file that defines the folder as a Python package.</li> <li><code>__pycache__</code> - This folder is created by Python to store compiled bytecode files for Python modules. </li> </ul> </li> </ol>"},{"location":"tutorials/create_project/#create-a-baseline-frame","title":"Create a baseline \"frame\"","text":"<p>In emodpy-workflow, a \"frame\" is used to define a collection of parameters and code. This collection could be your definition of a scenario, like vaccinating people for HIV on their 15th birthday.  See the reference for more information.</p> <p>Before you start creating new scenarios, you will want to create the frame that you will consider as your \"baseline.\"  This is a scenario too, but it will be the scenario that you will compare everything to.  Typically, you setup the baseline to be the standard country model.</p> <ol> <li> <p>Execute the following to see the options of the 'new_frame' command:</p> <pre><code>python -m emodpy_workflow.scripts.new_frame -h\n</code></pre> <p>You should see something similar to the following:</p> <pre><code>(env) C:\\work\\my_tutorial\\my_project&gt;python -m emodpy_workflow.scripts.new_frame -h\nusage: new_frame.py [-h] --country COUNTRY_MODEL --dest DEST_FRAME\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --country COUNTRY_MODEL\n                        Country model name to make new frame with. Required.\n  --dest DEST_FRAME     Name of new model frame. Required.\n</code></pre> <p>For this tutorial, we will use the country model called \"ZambiaForTraining\" and will name this frame \"baseline\".</p> </li> <li> <p>Execute the following to create the \"baseline\" frame</p> <pre><code>python -m emodpy_workflow.scripts.new_frame --country ZambiaForTraining --dest baseline\n</code></pre> <p>When the command is finished, you should see output similar to the following:</p> <pre><code>Variables are: {'country': 'ZambiaForTraining'}\n-- Created file in frame: baseline file: campaign.py\n-- Created file in frame: baseline file: config.py\n-- Created file in frame: baseline file: demographics.py\n-- Created file in frame: baseline file: __init__.py\nCreated new frame: baseline using country model: ZambiaForTraining\n</code></pre> </li> <li> <p>Execute the following command to see that a new <code>frames</code> directory has been created</p> WindowsLinux <pre><code>dir\n</code></pre> <pre><code>ls -l\n</code></pre> <p>You should see something similar to the following:</p> WindowsLinux <pre><code>Directory of C:\\work\\my_tutorial\\my_project\n\n09/02/2025  09:53 AM    &lt;DIR&gt;          .\n09/02/2025  09:53 AM    &lt;DIR&gt;          ..\n09/02/2025  09:53 AM    &lt;DIR&gt;          frames\n08/08/2025  02:41 PM             1,267 idmtools.ini\n08/11/2025  09:54 AM             3,542 manifest.py\n08/11/2025  09:54 AM               355 __init__.py\n08/11/2025  09:54 AM    &lt;DIR&gt;          __pycache__\n</code></pre> <pre><code>total 20\ndrwxrwxr-x 3 dbridenbecker dbridenbecker 4096 Sep  4 20:03 frames\n-rw-rw-r-- 1 dbridenbecker dbridenbecker 1267 Sep  4 19:49 idmtools.ini\n-rw-rw-r-- 1 dbridenbecker dbridenbecker  355 Sep  4 19:49 __init__.py\n-rw-rw-r-- 1 dbridenbecker dbridenbecker 3542 Sep  4 19:49 manifest.py\ndrwxrwxr-x 2 dbridenbecker dbridenbecker 4096 Sep  4 19:49 __pycache__\n</code></pre> </li> <li> <p>Execute the following command to see what is in the <code>frames</code> directory:</p> WindowsLinux <pre><code>dir frames\n</code></pre> <pre><code>ls -l frames\n</code></pre> <p>You should see something similar to the following:</p> WindowsLinux <pre><code>Directory of C:\\work\\my_tutorial\\my_project\\frames\n\n09/02/2025  09:53 AM    &lt;DIR&gt;          .\n09/02/2025  09:53 AM    &lt;DIR&gt;          ..\n09/02/2025  09:53 AM    &lt;DIR&gt;          baseline\n</code></pre> <pre><code>total 4\ndrwxrwxr-x 2 dbridenbecker dbridenbecker 4096 Sep  4 20:03 baseline\n</code></pre> <p>If you were to execute the <code>new_frame</code> command again or the <code>extend_frame</code> command a new directory will be created in the frames directory with the name you give the frame.</p> </li> <li> <p>Execute the following command to see what is in the <code>baseline</code> directory:</p> WindowsLinux <pre><code>dir frames\\baseline\n</code></pre> <pre><code>ls -l frames/baseline\n</code></pre> <p>You should see something similar to the following:</p> WindowsLinux <pre><code>Directory of C:\\work\\my_tutorial\\my_project\\frames\\baseline\n\n09/02/2025  09:53 AM    &lt;DIR&gt;          .\n09/02/2025  09:53 AM    &lt;DIR&gt;          ..\n09/02/2025  09:53 AM             1,377 campaign.py\n09/02/2025  09:53 AM             5,446 config.py\n09/02/2025  09:53 AM             1,408 demographics.py\n09/02/2025  09:53 AM             1,427 __init__.py\n</code></pre> <pre><code>total 20\n-rw-rw-r-- 1 dbridenbecker dbridenbecker 1350 Sep  4 20:03 campaign.py\n-rw-rw-r-- 1 dbridenbecker dbridenbecker 5365 Sep  4 20:03 config.py\n-rw-rw-r-- 1 dbridenbecker dbridenbecker 1381 Sep  4 20:03 demographics.py\n-rw-rw-r-- 1 dbridenbecker dbridenbecker 1398 Sep  4 20:03 __init__.py\n</code></pre> <p>The <code>campaign.py</code>, <code>config.py</code>, and <code>demographics.py</code> files give you hooks into how these different elements of an EMOD simulation are configured. When using <code>new_frame</code>, they will all default to what is defined in the country model, in this case, <code>ZambiaForTraining</code>.  The <code>__init__.py</code> file contains the logic to tie them together for emodpy-workflow.  More information on <code>__init__.py</code> can be found in the reference.</p> </li> <li> <p>View the contents of these files.</p> <p>Using a text editor, open these files and inspect their contents.  In each file, you should see two methods:</p> <ul> <li><code>initialize_XXX()</code></li> <li><code>get_campaign_XXX_calls()</code></li> </ul> <p>where \"XXX\" is replaced with config, campaign, or demographics depending on the file.  Depending on how you to modify the country model, these are the two methods that you will modify.</p> <p>See the other tutorials on modifying the configuration:</p> <ul> <li>Modify Configuration</li> <li>Modify Campaign</li> </ul> </li> </ol>"},{"location":"tutorials/create_project/#next-up-running-your-baseline-frame","title":"Next up: Running your baseline frame","text":"<p>Try the Run EMOD next to run your new baseline frame.</p>"},{"location":"tutorials/get_started/","title":"Get Started with EMOD-HIV and emodpy-workflow","text":""},{"location":"tutorials/get_started/#assumptions","title":"Assumptions","text":"<p>The following tutorials assume you are familiar with the following:</p> <ul> <li>Python</li> <li>Linux or Windows command-line</li> <li>Have a basic understanding of what EMOD is</li> </ul> <p>If you have been using EMOD-HIV with DtkTools, this comparison page will help you to understand what is different from how you have been using EMOD-HIV.</p>"},{"location":"tutorials/get_started/#setup-and-installation","title":"Setup and Installation","text":"<p>You can do the tutorials locally or using GitHub Codespaces.  The Setup and Installation instructions will get you prepared to do the following tutorials.</p>"},{"location":"tutorials/get_started/#create-a-project","title":"Create a project","text":"<p>The \"create project\" tutorial will guide you through creating your first emodpy-workflow project.  Everything you do with emodpy-workflow must be done within a project.</p>"},{"location":"tutorials/get_started/#run-emod","title":"Run EMOD","text":"<p>The \"run EMOD\" tutorial will get you changing parameters, running the model, and plotting data.  It will not only show you how easy it is to run EMOD, it will teach you how to run EMOD in a way that can help you quickly add new features and find issues.</p>"},{"location":"tutorials/get_started/#modify-report-output","title":"Modify report output","text":"<p>The \"change reports\" tutorial will introduce you to the different data out of EMOD via \"reports\".  EMOD can provide tons of information about the state of the individuals in the simulation and reports are the way to get that information.</p>"},{"location":"tutorials/get_started/#modify-the-configuration","title":"Modify the configuration","text":"<p>The \"change configuration\" tutorial will teach you how to change parameters in a structured way so you can easily compare the new parameters to the baseline.</p>"},{"location":"tutorials/get_started/#modify-the-campaign","title":"Modify the campaign","text":"<p>The campaign is where users make most of their changes.  It is where you determine the \"when, why, where, to whom, and what\" of interventions. The \"modify campaign: minimal campaign\",  \"modify campaign: add HIV vaccine\", and \"modify campaign: modify country model\" tutorials will teach you how to things like add an intervention or change a state of the cascade of care.</p>"},{"location":"tutorials/get_started/#make-a-parameter-calibrate-able-or-sweep-able-parameterizedcalls","title":"Make a parameter calibrate-able or sweep-able - ParameterizedCalls","text":"<p>emodpy-workflow provides a standard way of calibrating or sweeping any parameter that is \"available\".  The \"using ParameterizedCall\" tutorial will how to make a parameter availabe.</p>"},{"location":"tutorials/get_started/#sweep-a-parameter","title":"Sweep a parameter","text":"<p>The \"sweep parameter\" tutorial will show you how to sweep a parameter that is \"available\".  Users typically do this to see how different values of a parameter impact the simulation outcome. </p>"},{"location":"tutorials/get_started/#run-a-simple-calibration","title":"Run a simple calibration","text":"<p>The \"run calibration\" tutorial will teach you how to execute a simple calibration on a couple of parameters using emodpy-workflow.  It is NOT meant as an introduction to calibration, but if you understand calibration, it provides you with the instructions on how to do it.</p>"},{"location":"tutorials/modify_campaign_1_minimal_campaign/","title":"Modify campaign: Minimal campaign","text":""},{"location":"tutorials/modify_campaign_1_minimal_campaign/#purpose","title":"Purpose","text":"<p>This tutorial introduce the campaign basic and Casecade of Care in HIV health system and how to create and run a  minimal campaign with no interventions, establishing a simulation baseline.</p>"},{"location":"tutorials/modify_campaign_1_minimal_campaign/#campaign-basics","title":"Campaign basics","text":"<p>The campaign is the primary mechanism in EMOD for introducing changes in the simulation over time. It defines when,  where, and to whom interventions are delivered. Through campaigns, you can simulate programmatic activities such as HIV  testing, ART initiation, PrEP rollout, and more. Campaigns control behavior through event-based triggers, targeting  criteria, and time-based schedules.</p> <p>In Emodpy 2.0, modular building blocks for the campaign module have been introduced, giving users the flexibility to  mix and match components as needed. Previously, interventions and their distribution mechanisms (event coordinators)  were tightly coupled. Now, they are separated, making it easier to adjust how interventions are distributed and how  other campaign logic is configured.</p>"},{"location":"tutorials/modify_campaign_1_minimal_campaign/#cascade-of-care-in-the-hiv-health-system","title":"Cascade of care in the HIV health system","text":"<p>The cascade of care (CoC) in <code>emodpy-hiv</code> models the journey of individuals through the HIV care continuum,  including testing, linkage to care, treatment initiation, and retention. The CoC is represented as a series of states  that individuals can transition through based on interventions and their health status.  Key states in the CoC include:</p> <ul> <li>HCT (HIV Counseling and Testing)</li> <li>Linkage to ART or PrEP</li> <li>ART initiation and retention</li> <li>Loss to follow-up and reengagement</li> </ul> <p>These states are configurable and form a modular representation of the HIV health system embedded in the campaign logic.</p>"},{"location":"tutorials/modify_campaign_1_minimal_campaign/#prerequisites","title":"Prerequisites","text":"<p>Before starting this tutorial, please complete the following:</p> <ul> <li>Create project tutorial to create a new project with a baseline frame.</li> <li>Run EMOD tutorial to understand how to run simulations and plot results with baseline frame.</li> </ul>"},{"location":"tutorials/modify_campaign_1_minimal_campaign/#minimal-campaign-tutorial-removing-all-campaign-features","title":"Minimal campaign tutorial: Removing all campaign features","text":"<p>This tutorial demonstrates how to create a minimal campaign by removing all campaign features. This approach is useful  for establishing a baseline simulation without any interventions, triggers, or programmatic activities.</p>"},{"location":"tutorials/modify_campaign_1_minimal_campaign/#a-extend-frame","title":"a. Extend frame","text":"<p>To create a frame called <code>minimal_campaign</code> extended from the baseline, run the following command in the project  directory:</p> <pre><code>python -m emodpy_workflow.scripts.extend_frame --source baseline --dest minimal_campaign\n</code></pre> <p>This inherits the <code>baseline</code> configuration (similar to Python class inheritance) and allows you to remove or simplify  the CoC logic in <code>minimal_campaign</code>. For this tutorial, we will remove all campaign features.</p>"},{"location":"tutorials/modify_campaign_1_minimal_campaign/#b-modify-campaign","title":"b. Modify campaign","text":"<p>In the <code>frames/minimal_campaign</code> directory, open <code>campaign.py</code>. Remove all campaign elements from the country model by  updating the <code>get_campaign_parameterized_calls</code> function to return an empty list. We comment out the line that calls the <code>source_frame.model.campaign_parameterizer</code> function, which adds all the campaign elements from the country model and  add simply return an empty list (see line 2 - 5 in the code snippet below).</p> <p>This ensures no interventions or events are included in the campaign, while still calling the country model's  <code>initialize_campaign</code> function to retain essential setup (such as Base_Year).</p> <pre><code>def get_campaign_parameterized_calls(campaign: emod_api.campaign) -&gt; List[ParameterizedCall]:\n    # parameterized_calls = source_frame.model.campaign_parameterizer(campaign=campaign)\n    # Add any additional ParameterizedCalls here\n    parameterized_calls = []\n    return parameterized_calls\n</code></pre>"},{"location":"tutorials/modify_campaign_1_minimal_campaign/#c-run-emod","title":"c. Run EMOD","text":"<p>Run the simulation using the following command:</p> <pre><code>python -m emodpy_workflow.scripts.run -N MinimalCampaign -f minimal_campaign -o results/minimal_campaign -p ContainerPlatform\n</code></pre> <p>Please see the run EMOD tutorial for more details on this command.</p>"},{"location":"tutorials/modify_campaign_1_minimal_campaign/#d-plot-insetchart","title":"d. Plot InsetChart","text":"<p>After running the simulation, you can examine the results by plotting the InsetChart to compare the minimal campaign  with the baseline.</p> <ol> <li> <p>Download the InsetChart to the <code>results/minimal_campaign</code> directory: <pre><code>python -m emodpy_workflow.scripts.download -d output/InsetChart.json -r results/minimal_campaign/experiment_index.csv -p ContainerPlatform\n</code></pre></p> </li> <li> <p>Use the plotting tool to compare the output with the baseline: <pre><code>python -m emodpy_hiv.plotting.plot_inset_chart results/my_first_run/my_first_suite--0/InsetChart/InsetChart_sample00000_run00001.json -d results/minimal_campaign/MinimalCampaign--0/InsetChart/ -t \"InsetChart-minimal_campaign\" -o images/minimal_campaign\n</code></pre> The first argument is the path to the baseline InsetChart, and the <code>-d</code> argument specifies the directory containing the minimal campaign InsetChart files.</p> </li> </ol> <p>Here is an example of what you might see in the InsetChart comparing baseline and minimal_campaign:  The red line represents the baseline scenario with the full cascade of care, while the blue line represents the minimal campaign scenario without any interventions. You may observe differences in HIV incidence, prevalence, and other key  metrics over time.</p>"},{"location":"tutorials/modify_campaign_1_minimal_campaign/#next-steps","title":"Next steps","text":"<p>You have successfully created and run a minimal campaign in EMOD, establishing a baseline simulation without any  interventions. Please proceed to the next tutorial, Modify Campaign: Add HIV Vaccine,  where you will learn how to add specific interventions to the campaign and observe their effects on the simulation.</p>"},{"location":"tutorials/modify_campaign_2_add_vaccine/","title":"Modify campaign: Add HIV vaccine","text":""},{"location":"tutorials/modify_campaign_2_add_vaccine/#prerequisites","title":"Prerequisites","text":"<p>Before starting this tutorial, please complete the following:</p> <ul> <li>Create project tutorial to create a new project with a baseline frame.</li> <li>Run EMOD tutorial to understand how to run simulations and plot results with baseline frame.</li> <li>Modify Campaign: Minimal Campaign to understand the basics of campaign structure, including the cascade of care (CoC).</li> </ul>"},{"location":"tutorials/modify_campaign_2_add_vaccine/#modify-the-campaign-inside-a-frame-directly","title":"Modify the campaign inside a frame directly","text":"<p>You may want to simulate a change in outcomes (like introducing a vaccine) without modeling every step in the  delivery system. The easiest and most direct way to do this is to modify the <code>campaign.py</code> inside a frame directly.</p> <p>Please follow the steps below to add a vaccine to campaign.</p>"},{"location":"tutorials/modify_campaign_2_add_vaccine/#a-extend-frame","title":"a. Extend frame","text":"<p>Let's extend the baseline frame to create a new frame called <code>vaccine</code>:</p> <pre><code>python -m emodpy_workflow.scripts.extend_frame --source baseline --dest vaccine\n</code></pre>"},{"location":"tutorials/modify_campaign_2_add_vaccine/#b-add-hiv-vaccine-directly","title":"b. Add HIV vaccine directly","text":"<p>Modify <code>campaign.py</code> under <code>my_project/frames/vaccine</code> folder to include a function that  adds a vaccine intervention. This tutorial adds:</p> <ul> <li>Add a ControlledVaccine with a constant WaningConfig.</li> <li>Set initial efficacy = 1.0 as default.</li> <li>Distribute the vaccine when the person sexually debuts - on the <code>STIDebut</code> event.</li> <li>Start listening and distributing the vaccine on January 1st, 2026.</li> <li>Make initial efficacy a hyperparameter of the method.</li> </ul> <p>Here is an example of how to implement this: (add the following import lines and function to <code>campaign.py</code>)</p> <pre><code>from emodpy_hiv.campaign.individual_intervention import ControlledVaccine\nfrom emodpy_hiv.campaign.distributor import add_intervention_triggered\nfrom emodpy_hiv.campaign.waning_config import Constant\n\n\ndef add_hiv_vaccine(campaign, vaccine_efficacy=1.0):\n    vaccine = ControlledVaccine(\n        campaign=campaign,\n        waning_config=Constant(constant_effect=vaccine_efficacy)\n    )\n    add_intervention_triggered(\n        campaign=campaign,\n        intervention_list=[vaccine],\n        triggers_list=[\"STIDebut\"],\n        start_year=2026\n    )\n    return campaign\n</code></pre> <p>In the same <code>campaign.py</code> file, update the <code>get_campaign_parameterized_calls</code> function by adding a call to  <code>add_hiv_vaccine</code> (see line 4 in the code snippet below). Insert the new <code>ParameterizedCall</code> after the existing  calls (see line 5). This makes <code>vaccine_efficacy</code> a hyperparameter that can be modified when running the simulation:</p> <pre><code>def get_campaign_parameterized_calls(campaign):\n    parameterized_calls = source_frame.model.campaign_parameterizer(campaign=campaign)\n    # Add any additional ParameterizedCalls here\n    pc = ParameterizedCall(func=add_hiv_vaccine, hyperparameters={'vaccine_efficacy': None})\n    parameterized_calls.append(pc)\n    return parameterized_calls\n</code></pre>"},{"location":"tutorials/modify_campaign_2_add_vaccine/#c-check-hyperparameter","title":"c. Check hyperparameter","text":"<p>You can check that the <code>vaccine_efficacy</code> is now an available hyperparameter in campaign.py by running:</p> <pre><code>python -m emodpy_workflow.scripts.available_parameters -F vaccine\n</code></pre> <p>You should see <code>vaccine_efficacy</code> listed under Campaign parameters. </p>"},{"location":"tutorials/modify_campaign_2_add_vaccine/#d-run-emod","title":"d. Run EMOD","text":"<p>Now you can run EMOD with the new vaccine frame:</p> <pre><code>python -m emodpy_workflow.scripts.run -N Vaccine -f vaccine -o results/vaccine -p ContainerPlatform\n</code></pre> <p>Please see the run EMOD tutorial for more details on this command.</p>"},{"location":"tutorials/modify_campaign_2_add_vaccine/#e-plot-insetchart","title":"e. Plot InsetChart","text":"<p>After running the simulation, you can examine the results by plotting the InsetChart to compare the vaccine frame with  the baseline.</p> <ol> <li> <p>Download the InsetChart to the <code>results/vaccine</code> directory: <pre><code>python -m emodpy_workflow.scripts.download -d output/InsetChart.json -r results/vaccine/experiment_index.csv -p ContainerPlatform\n</code></pre></p> </li> <li> <p>Plot InsetChart and compare with baseline: <pre><code>python -m emodpy_hiv.plotting.plot_inset_chart results/my_first_run/my_first_suite--0/InsetChart/InsetChart_sample00000_run00001.json -d results/vaccine/Vaccine--0/InsetChart -t \"InsetChart-vaccine\" -o images/vaccine\n</code></pre></p> </li> </ol> <p>After plotting, you should see prevalence drops but costs go up after year 2026 when the  vaccine is introduced. The red line is the baseline and the blue line is the vaccine frame.</p> <p>Visualize results: </p>"},{"location":"tutorials/modify_campaign_2_add_vaccine/#f-plot-reporthivbyageandgender","title":"f. Plot ReportHIVByAgeAndGender","text":"<p>You can plot ReportHIVByAgeAndGender so you can look at infection count across age groups.</p> <ol> <li> <p>Download the ReportHIVByAgeAndGender to the <code>results/vaccine</code> directory: <pre><code>python -m emodpy_workflow.scripts.download -d output/ReportHIVByAgeAndGender.csv -r results/vaccine/experiment_index.csv -p ContainerPlatform\n</code></pre></p> </li> <li> <p>Visualize infection counts across age groups: <pre><code>python -m emodpy_hiv.plotting.plot_hiv_by_age_and_gender results/vaccine/Vaccine--0/ReportHIVByAgeAndGender/ -p prevalence -a -m -o images/vaccine\n</code></pre></p> </li> </ol> <p>Here is an example of what you might see in the ReportHIVByAgeAndGender for vaccine frame: </p>"},{"location":"tutorials/modify_campaign_2_add_vaccine/#next-steps","title":"Next steps","text":"<p>You have successfully added an HIV vaccine to the campaign inside a frame directly. You can further explore the  following options: - Experiment with different vaccine efficacies by modifying the <code>vaccine_efficacy</code> hyperparameter when running the  simulation. Please see the Sweep Parameter tutorial for more details. - Learn how to update the campaign by modifying the CountryModel in the Modify Campaign: Modify Country Model tutorial.</p>"},{"location":"tutorials/modify_campaign_3_modify_country_model/","title":"Modify campaign: Modify country model","text":""},{"location":"tutorials/modify_campaign_3_modify_country_model/#country-model-basics","title":"Country model basics","text":"<p>A country model in <code>emodpy-hiv</code> encapsulates campaign logic specific to a setting (like <code>Zambia</code> and <code>ZambiaForTraining</code>). Subclassing allows you to override methods like <code>add_state_HCTUptakeAtDebut()</code> to customize intervention logic.</p> <p>You can find country models in the <code>emodpy_hiv/country</code> directory. Each country model is a subclass of the base  <code>Country</code> class and implements methods to define the cascade of care and other interventions. You can create a new  country model by subclassing an existing one and overriding specific methods to change behavior. This allows you to  tailor the campaign logic to different settings or scenarios, which has more control than editing the campaign.py  inside the frame. Moreover, country models are inherently more shareable and reusable between researchers as they can  be added to <code>emodpy-hiv</code> for future projects.</p> <p>In this tutorial, we will create a new country model for <code>ZambiaWithLongLastingPrep</code> by subclassing the  <code>ZambiaForTraining</code> country model and modifying the <code>add_state_HCTUptakeAtDebut()</code> method to distribute a long-lasting  form of PrEP at sexual debut.</p>"},{"location":"tutorials/modify_campaign_3_modify_country_model/#prerequisites","title":"Prerequisites","text":"<p>Before starting this tutorial, please complete the following:</p> <ul> <li>Create project tutorial to create a new project with a baseline frame.</li> <li>Run EMOD tutorial to understand how to run simulations and plot results with baseline frame.</li> <li>Modify Campaign: Minimal Campaign to understand the basics of campaign  structure, including the cascade of care (CoC).</li> <li>Modify Campaign: Add HIV Vaccine to understand how to add interventions  directly to a campaign.</li> </ul>"},{"location":"tutorials/modify_campaign_3_modify_country_model/#modify-the-campaign-by-changing-the-country-model","title":"Modify the campaign by changing the country model","text":""},{"location":"tutorials/modify_campaign_3_modify_country_model/#a-create-new-frame","title":"a. Create new frame","text":"<p>Make a new frame with <code>ZambiaWithLongLastingPrep</code> country model by running the following command in the project directory:</p> <pre><code>python -m emodpy_workflow.scripts.new_frame --country ZambiaWithLongLastingPrep --dest ZambiaWithLongLastingPrep_coc\n</code></pre> <p>Important</p> <p>Since <code>ZambiaWithLongLastingPrep</code> is a country model that doesn't exist yet, the <code>emodpy_workflow</code> does not know where  to find it. You will get a warning saying that this country model cannot be found. This warning can be ignored for  now, as you will creating it in the next section.</p>"},{"location":"tutorials/modify_campaign_3_modify_country_model/#b-create-zambiawithlonglastingprep-country-model","title":"b. Create ZambiaWithLongLastingPrep country model","text":"<p>In the ZambiaWithLongLastingPrep_coc directory, create a new country model called <code>ZambiaWithLongLastingPrep</code> by  subclassing the <code>ZambiaForTraining</code> Country Model and override <code>add_state_HCTUptakeAtDebut()</code> method to distribute a  long-lasting form of PrEP at sexual debut, followed by a decision point for HIV testing uptake. The long-lasting PrEP is distributed starting in 2025, and the HIV testing uptake decision point is triggered by a new event,  Enter_Health_Care_System, which is broadcast when individuals receive the long-lasting PrEP. The HIV testing uptake decision point stops listening for the STIDebut event after 35 years (i.e., after 2025).</p> <p>Here are the detailed steps:</p> <ol> <li> <p>Create a new Python file named <code>zambia_withlong_lasting_prep.py</code> in the <code>frames/ZambiaWithLongLastingPrep_coc</code> directory:</p> <p>Add the following import statements at the top of the file: <pre><code>import emod_api\nfrom emodpy_hiv.campaign.distributor import add_intervention_triggered\nfrom emodpy_hiv.campaign.individual_intervention import (\n  HIVSigmoidByYearAndSexDiagnostic,\n  ControlledVaccine,\n  BroadcastEvent,\n  Sigmoid\n)\nfrom emodpy_hiv.campaign.common import CommonInterventionParameters, PropertyRestrictions\nimport emodpy_hiv.campaign.cascade_of_care as coc\nfrom emodpy_hiv.countries import ZambiaForTraining \nfrom emodpy_hiv.campaign.waning_config import Constant\n</code></pre></p> </li> <li> <p>Define the <code>ZambiaWithLongLastingPrep</code> class that subclasses <code>ZambiaForTraining</code>: <pre><code>class ZambiaWithLongLastingPrep(ZambiaForTraining):\n  country_name = \"ZambiaWithLongLastingPrep\"\n</code></pre> The next few steps override the <code>add_state_HCTUptakeAtDebut()</code> method to implement the new logic.</p> </li> <li> <p>Copy the <code>add_state_HCTUptakeAtDebut()</code> Function:</p> <p>Copy this function from the Country class and cascade_of_care.py to your new <code>ZambiaWithLongLastingPrep</code> class. Please see  Modify Campaign: Minimal Campaign Cascade of Care section for more details  on this function. <pre><code>@classmethod\ndef add_state_HCTUptakeAtDebut(\n  cls,\n  campaign: emod_api.campaign,\n  start_year: float,\n  node_ids: list[int] = None\n):\n  disqualifying_properties = [\n      coc.CascadeState.LOST_FOREVER,\n      coc.CascadeState.ON_ART,\n      coc.CascadeState.LINKING_TO_ART,\n      coc.CascadeState.ON_PRE_ART,\n      coc.CascadeState.LINKING_TO_PRE_ART,\n      coc.CascadeState.ART_STAGING\n  ]\n  initial_trigger = coc.CustomEvent.STI_DEBUT\n  hct_upate_at_debut_pv = coc.CascadeState.HCT_UPTAKE_AT_DEBUT\n\n  # set up health care testing uptake at sexual debut by time\n  female_multiplier = 1.0\n  uptake_choice = HIVSigmoidByYearAndSexDiagnostic(\n      campaign,\n      year_sigmoid=Sigmoid(min=-0.005, max=0.05, mid=2005, rate=1),\n      positive_diagnosis_event=coc.HCT_TESTING_LOOP_TRIGGER,\n      negative_diagnosis_event=coc.HCT_UPTAKE_POST_DEBUT_TRIGGER_1,\n      female_multiplier=female_multiplier,\n      common_intervention_parameters=CommonInterventionParameters(\n          disqualifying_properties=disqualifying_properties,\n          new_property_value=hct_upate_at_debut_pv\n      )\n  )\n  add_intervention_triggered(\n      campaign,\n      intervention_list=[uptake_choice],\n      triggers_list=[initial_trigger],\n      start_year=start_year,\n      property_restrictions=PropertyRestrictions(\n          individual_property_restrictions=[['Accessibility:Yes']]\n      ),\n      node_ids=node_ids,\n      event_name='HCTUptakeAtDebut: state 0 (decision, sigmoid by year and sex)'\n  )\n  return (\n      coc.HCT_TESTING_LOOP_TRIGGER,  # return the trigger for the HCTTestingLoop state\n      coc.HCT_UPTAKE_POST_DEBUT_TRIGGER_1\n  )\n</code></pre></p> </li> <li> <p>Modify Event Listening Duration:</p> <p>Adjust the copied function so that it behaves like the baseline, but stops after 35 years or by 2025 (i.e., stop  listening for the STIDebut event after that time). In order to do this, set the duration parameter in the  <code>add_intervention_triggered()</code> function to 365 * 35 days (35 years) when distributing the <code>uptake_choice</code> intervention. You can modify line 32  - 42 in the copied function to include a <code>duration</code> parameter and set it to 35 years: <pre><code># stop listing for STIDebut after 35 years.\nduration = 365 * 35\nadd_intervention_triggered(\n      campaign,\n      intervention_list=[uptake_choice],\n      triggers_list=[initial_trigger],\n      start_year=start_year,\n      property_restrictions=PropertyRestrictions(\n          individual_property_restrictions=[['Accessibility:Yes']]\n      ),\n      node_ids=node_ids,\n      event_name='HCTUptakeAtDebut: state 0 (decision, sigmoid by year and sex)',\n      duration=duration\n  )\n</code></pre></p> </li> <li> <p>Insert Long-Lasting PrEP Distribution:</p> <p>Before the normal decision point (the sigmoid choice), begin listening for the STIDebut event, distribute a very long-lasting form of  PrEP(ControlledVaccine), and broadcast a new event, Enter_Health_Care_System, starting in the year 2025. <pre><code># insert a long-lasting ControlledVaccine\nlaprep_start_year = start_year + duration / 365\nvaccine = ControlledVaccine(\n   campaign,\n   waning_config=Constant(0.99),\n   common_intervention_parameters=CommonInterventionParameters(\n       disqualifying_properties=disqualifying_properties,\n       new_property_value=hct_upate_at_debut_pv\n   )\n)\nbroadcast_event = BroadcastEvent(\n   campaign=campaign,\n   broadcast_event=\"Enter_Health_Care_System\",\n   common_intervention_parameters=CommonInterventionParameters(\n       disqualifying_properties=disqualifying_properties,\n       new_property_value=hct_upate_at_debut_pv\n   )\n)\nadd_intervention_triggered(\n   campaign=campaign,\n   intervention_list=[vaccine, broadcast_event],\n   triggers_list=[initial_trigger],\n   start_year=laprep_start_year,\n   property_restrictions=PropertyRestrictions(\n       individual_property_restrictions=[['Accessibility:Yes']]\n   ),\n   node_ids=node_ids,\n   event_name='HCTUptakeAtDebut: LA-PrEP on STI Debut'\n)\n</code></pre></p> </li> <li> <p>Update Uptake Choice Based on New Event:</p> <p>Modify the distribution of the uptake_choice intervention so it depends on the new Enter_Health_Care_System  event starting in year 2025. <pre><code># distribute the SigmoidByYearAndSexDiagnostic intervention by Enter_Health_Care_System event\nadd_intervention_triggered(\n   campaign,\n   intervention_list=[uptake_choice],\n   triggers_list=[\"Enter_Health_Care_System\"],\n   start_year=laprep_start_year,\n   property_restrictions=PropertyRestrictions(\n       individual_property_restrictions=[['Accessibility:Yes']]\n   ),\n   node_ids=node_ids,\n   event_name='HCTUptakeAtDebut: state 0 triggered by Enter_Health_Care_System after 2025'\n)\n</code></pre></p> </li> </ol> <p>On the left side is the original function from <code>ZambiaForTraining</code>, and on the right is the modified function for <code>ZambiaWithLongLastingPrep</code>.</p> <p>Comparison of HCT Uptake at Debut function:</p> ZambiaForTraining (original) ZambiaWithLongLastingPrep (modified) See comparison below See comparison below <p></p> <p>Important</p> <p>In this tutorial, the <code>ZambiaForTraining</code> class serves as the base for <code>ZambiaWithLongLastingPrep</code>.  <code>ZambiaForTraining</code> is similar to the <code>Zambia</code> country model but utilizes a smaller population to accelerate  simulation time.</p> <p>You may select any country model class to use as a base class in your projects.</p> <p>Here is a complete example of the <code>zambia_withlong_lasting_prep.py</code> file with line numbers for easier reference:</p> <pre><code>import emod_api\nfrom emodpy_hiv.campaign.distributor import add_intervention_triggered\nfrom emodpy_hiv.campaign.individual_intervention import (\n    HIVSigmoidByYearAndSexDiagnostic,\n    ControlledVaccine,\n    BroadcastEvent,\n    Sigmoid\n)\nfrom emodpy_hiv.campaign.common import CommonInterventionParameters, PropertyRestrictions\nimport emodpy_hiv.campaign.cascade_of_care as coc\nfrom emodpy_hiv.countries import ZambiaForTraining \nfrom emodpy_hiv.campaign.waning_config import Constant\n\n\nclass ZambiaWithLongLastingPrep(ZambiaForTraining):\n    country_name = \"ZambiaWithLongLastingPrep\"\n\n    @classmethod\n    def add_state_HCTUptakeAtDebut(\n        cls,\n        campaign: emod_api.campaign,\n        start_year: float,\n        node_ids: list[int] = None\n    ):\n        disqualifying_properties = [\n            coc.CascadeState.LOST_FOREVER,\n            coc.CascadeState.ON_ART,\n            coc.CascadeState.LINKING_TO_ART,\n            coc.CascadeState.ON_PRE_ART,\n            coc.CascadeState.LINKING_TO_PRE_ART,\n            coc.CascadeState.ART_STAGING\n        ]\n        initial_trigger = coc.CustomEvent.STI_DEBUT\n        hct_upate_at_debut_pv = coc.CascadeState.HCT_UPTAKE_AT_DEBUT\n\n        # set up health care testing uptake at sexual debut by time\n        # stop listing for STIDebut after 35 years.\n        female_multiplier = 1.0\n        duration = 365 * 35\n        uptake_choice = HIVSigmoidByYearAndSexDiagnostic(\n            campaign,\n            year_sigmoid=Sigmoid(min=-0.005, max=0.05, mid=2005, rate=1),\n            positive_diagnosis_event=coc.HCT_TESTING_LOOP_TRIGGER,\n            negative_diagnosis_event=coc.HCT_UPTAKE_POST_DEBUT_TRIGGER_1,\n            female_multiplier=female_multiplier,\n            common_intervention_parameters=CommonInterventionParameters(\n                disqualifying_properties=disqualifying_properties,\n                new_property_value=hct_upate_at_debut_pv\n            )\n        )\n        add_intervention_triggered(\n            campaign,\n            intervention_list=[uptake_choice],\n            triggers_list=[initial_trigger],\n            start_year=start_year,\n            property_restrictions=PropertyRestrictions(\n                individual_property_restrictions=[['Accessibility:Yes']]\n            ),\n            node_ids=node_ids,\n            event_name='HCTUptakeAtDebut: state 0 (decision, sigmoid by year and sex)',\n            duration=duration\n        )\n\n        # insert a long-lasting ControlledVaccine\n        laprep_start_year = start_year + duration / 365\n        vaccine = ControlledVaccine(\n            campaign,\n            waning_config=Constant(0.99),\n            common_intervention_parameters=CommonInterventionParameters(\n                disqualifying_properties=disqualifying_properties,\n                new_property_value=hct_upate_at_debut_pv\n            )\n        )\n        broadcast_event = BroadcastEvent(\n            campaign=campaign,\n            broadcast_event=\"Enter_Health_Care_System\",\n            common_intervention_parameters=CommonInterventionParameters(\n                disqualifying_properties=disqualifying_properties,\n                new_property_value=hct_upate_at_debut_pv\n            )\n        )\n        add_intervention_triggered(\n            campaign=campaign,\n            intervention_list=[vaccine, broadcast_event],\n            triggers_list=[initial_trigger],\n            start_year=laprep_start_year,\n            property_restrictions=PropertyRestrictions(\n                individual_property_restrictions=[['Accessibility:Yes']]\n            ),\n            node_ids=node_ids,\n            event_name='HCTUptakeAtDebut: LA-PrEP on STI Debut'\n        )\n        # distribute the SigmoidByYearAndSexDiagnostic intervention by Enter_Health_Care_System event\n        add_intervention_triggered(\n            campaign,\n            intervention_list=[uptake_choice],\n            triggers_list=[\"Enter_Health_Care_System\"],\n            start_year=laprep_start_year,\n            property_restrictions=PropertyRestrictions(\n                individual_property_restrictions=[['Accessibility:Yes']]\n            ),\n            node_ids=node_ids,\n            event_name='HCTUptakeAtDebut: state 0 triggered by Enter_Health_Care_System after 2025'\n        )\n        return (\n            coc.HCT_TESTING_LOOP_TRIGGER,  # return the trigger for the HCTTestingLoop state\n            coc.HCT_UPTAKE_POST_DEBUT_TRIGGER_1\n        )\n</code></pre>"},{"location":"tutorials/modify_campaign_3_modify_country_model/#c-update-frame-to-use-new-country-model","title":"c. Update frame to use new country model","text":"<p>Now the <code>ZambiaWithLongLastingPrep</code> country model has been created, it is not yet recognized by <code>emodpy-workflow</code> or  <code>emodpy-hiv</code>. To use this new country model in the <code>ZambiaWithLongLastingPrep_coc</code> frame, you need to update the frame  to reference it. For simplicity in this tutorial, move the file to the frame directory and import it directly in <code>campaign.py</code>.</p> <p>Important</p> <p>Ideally, if you want to make the new country model reusable, you can put it in the <code>emodpy_hiv/country</code> directory and  import it in <code>campaign.py</code>. Please see step g for more  details. For the current step in this tutorial, we will keep it simple and just move the file to the frame directory.</p> <p>Modify the import statement in <code>campaign.py</code>, <code>config.py</code>, and <code>demographics.py</code> to import the <code>ZambiaWithLongLastingPrep</code> country  model:</p> <p>In each file, comment out the current country model import line(line 1) and replace it with an import for  <code>ZambiaWithLongLastingPrep</code> (line 2 - 4).</p> <pre><code># from emodpy_hiv.countries import ZambiaWithLongLastingPrep as country_model\nimport sys, os\nsys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))\nfrom zambia_withlong_lasting_prep import ZambiaWithLongLastingPrep as country_model\n</code></pre>"},{"location":"tutorials/modify_campaign_3_modify_country_model/#d-run-emod","title":"d. Run EMOD","text":"<p>Now you can run EMOD with the new <code>ZambiaWithLongLastingPrep_coc</code> frame: <pre><code>python -m emodpy_workflow.scripts.run -N ZambiaWithLongLastingPrep -f ZambiaWithLongLastingPrep_coc -o results/ZambiaWithLongLastingPrep_coc -p ContainerPlatform\n</code></pre> Please see the run EMOD tutorial for more details on this command.</p>"},{"location":"tutorials/modify_campaign_3_modify_country_model/#e-plot-insetchart","title":"e. Plot InsetChart","text":"<p>After running the simulation, you can examine the results by plotting the InsetChart to compare the <code>ZambiaWithLongLastingPrep_coc</code> frame  with the baseline.</p> <ol> <li> <p>Download the InsetChart to the <code>results/ZambiaWithLongLastingPrep_coc</code> directory: <pre><code>python -m emodpy_workflow.scripts.download -d output/InsetChart.json -r results/ZambiaWithLongLastingPrep_coc/experiment_index.csv -p ContainerPlatform\n</code></pre></p> </li> <li> <p>Use the plotting tool to compare the output with the baseline:</p> </li> </ol> <p><pre><code>python -m emodpy_hiv.plotting.plot_inset_chart results/my_first_run/my_first_suite--0/InsetChart/InsetChart_sample00000_run00001.json -d results/ZambiaWithLongLastingPrep_coc/ZambiaWithLongLastingPrep--0/InsetChart/ -t \"InsetChart-ZambiaWithLongLastingPrep_coc\" -o images/ZambiaWithLongLastingPrep_coc\n</code></pre> Here is an example of what you might see in the InsetChart comparing baseline and <code>ZambiaWithLongLastingPrep_coc</code>: </p> <p>You should see prevalence drops but costs go up after year 2025 when the long-lasting PrEP is introduced. The red line  is the baseline and the blue line is the <code>ZambiaWithLongLastingPrep_coc</code> frame.</p>"},{"location":"tutorials/modify_campaign_3_modify_country_model/#f-plot-reporthivbyageandgender","title":"f. Plot ReportHIVByAgeAndGender","text":"<p>Next, we plot the number of infected people from ReportHIVByAgeAndGender across ages to highlight that it takes decades for older age group infection counts to stabilize in response to the ZambiaWithLongLastingPrep campaign.</p> <ol> <li> <p>Download the ReportHIVByAgeAndGender to the <code>results/ZambiaWithLongLastingPrep_coc</code> directory: <pre><code>python -m emodpy_workflow.scripts.download -d output/ReportHIVByAgeAndGender.csv -r results/ZambiaWithLongLastingPrep_coc/experiment_index.csv -p ContainerPlatform\n</code></pre></p> </li> <li> <p>Visualize infection counts across age groups:</p> </li> </ol> <p><pre><code>python -m emodpy_hiv.plotting.plot_hiv_by_age_and_gender results/ZambiaWithLongLastingPrep_coc/ZambiaWithLongLastingPrep--0/ReportHIVByAgeAndGender/ -p prevalence -a -m -o images/ZambiaWithLongLastingPrep_coc\n</code></pre> Here is an example of what you might see in the ReportHIVByAgeAndGender for ZambiaWithLongLastingPrep_coc frame: </p>"},{"location":"tutorials/modify_campaign_3_modify_country_model/#g-optional-public-zambiawithlonglastingprep-country-model","title":"g. Optional: Public ZambiaWithLongLastingPrep country model","text":"<p>If you want to make the <code>ZambiaWithLongLastingPrep</code> country model reusable, you can put it in <code>emodpy-hiv</code> and use it in <code>emodpy-workflow</code>. Please refer to How to publish a new country model for more details.</p>"},{"location":"tutorials/modify_campaign_3_modify_country_model/#conclusion","title":"Conclusion","text":"<p>The 3 campaign tutorials demonstrated how to modify campaign logic in EMOD simulations using <code>emodpy_workflow</code>, including  creating minimal campaigns, adding interventions directly, and customizing country models for advanced scenarios. By  mastering these techniques, you can tailor simulations to specific research questions and programmatic needs.</p> <p>For further customization, refer to the following tutorials:</p> <ul> <li>Modify Config: Adjust simulation parameters and settings.</li> <li>Modify Reports: Customize output reports and data collection.</li> </ul> <p>Combining these approaches enables comprehensive control over your EMOD workflows and simulation outcomes.</p>"},{"location":"tutorials/modify_configuration/","title":"Modify Configuration Parameters","text":"<p>Configuration parameters are simulation-wide parameters that affect how EMOD runs at a fundamental level. These include parameters related, but not limited to:</p> <ul> <li>Model duration, timestep length, and simulation start time</li> <li>How a disease progresses and transmits</li> <li>Whether agents can be born, age, and/or die</li> </ul>"},{"location":"tutorials/modify_configuration/#overview","title":"Overview","text":"<p>Configuration parameters are assigned values in functions <code>initialize_config</code> and <code>get_config_parameterized_calls</code> in a frame, however, it is common practice to set default/initial values in the country model versions of these methods.</p>"},{"location":"tutorials/modify_configuration/#example","title":"Example","text":"<p>In this example, we update the value of configuration parameter named Base_Infectivity, which alters how infectious a disease is at a fundamental level (before any other modifiers apply).</p>"},{"location":"tutorials/modify_configuration/#prerequisites","title":"Prerequisites","text":"<p>This tutorial requires you to have done the following:</p> <ul> <li>Setup and installed emodpy-workflow</li> <li>Created a project and a frame</li> <li>Learned how to run EMOD</li> </ul>"},{"location":"tutorials/modify_configuration/#extend-the-baseline-frame-for-alteration","title":"Extend the baseline frame for alteration","text":"<pre><code>python -m emodpy_workflow.scripts.extend_frame --source baseline --dest more_infectious\n</code></pre>"},{"location":"tutorials/modify_configuration/#edit-the-frame-configpy","title":"Edit the frame config.py","text":"<p>Here we edit the <code>initialize_config</code> function, opting to not make a hyperparameter for setting <code>Base_Infectivity</code> for simplicity. An alternative example that makes a hyperparameter is located at  how to use elements in a frame.</p> <p>Edit file <code>frames/more_infectious/config.py</code> to have 10 times greater infectivity. It should contain the following:</p> <pre><code>from typing import List\n\nfrom emod_api.schema_to_class import ReadOnlyDict\nfrom emodpy_hiv.parameterized_call import ParameterizedCall\nfrom emodpy_hiv.reporters.reporters import Reporters\n\nfrom .. import baseline as source_frame\n\n\ndef initialize_config(manifest):\n    config = source_frame.model.config_initializer(manifest=manifest)\n    config.parameters.x_Base_Population = config.parameters.x_Base_Population\n    config.parameters.Base_Infectivity = config.parameters.Base_Infectivity * 10  # Increasing infectivity here.\n    return config\n\n\ndef get_config_parameterized_calls(config: ReadOnlyDict) -&gt; List[ParameterizedCall]:\n    parameterized_calls = source_frame.model.config_parameterizer(config=config)\n    return parameterized_calls\n\n\ndef build_reports(reporters: Reporters):\n    reporters = source_frame.model.build_reports(reporters)\n    return reporters\n</code></pre>"},{"location":"tutorials/modify_configuration/#run-emod","title":"Run EMOD","text":"<p>We will run the baseline frame and more_infectious frames:</p> <pre><code>python -m emodpy_workflow.scripts.run -f baseline -N ConfigUpdate -o config_baseline_output -p ContainerPlatform -d output/InsetChart.json\n</code></pre> <pre><code>python -m emodpy_workflow.scripts.run -f more_infectious -N ConfigUpdate -o config_more_infectious_output -p ContainerPlatform -d output/InsetChart.json\n</code></pre>"},{"location":"tutorials/modify_configuration/#compare-insetchartjson","title":"Compare InsetChart.json","text":"<p>Run:</p> <pre><code>python -m emodpy_hiv.plotting.plot_inset_chart config_baseline_output/ConfigUpdate--0/InsetChart/InsetChart_sample00000_run00001.json config_more_infectious_output/ConfigUpdate--0/InsetChart/InsetChart_sample00000_run00001.json\n</code></pre> <p>Blue below represents the more_infectious frame and red represents the frame baseline. As can be seen, highly infectious HIV results in higher infection rates and mortality.</p> <p></p>"},{"location":"tutorials/modify_reports/","title":"Modify Reports","text":"<p>Reports are output (files) generated by EMOD. There are multiple built-in EMOD reports that are configured by Python  code as well as the ability to create custom reports for a project.</p>"},{"location":"tutorials/modify_reports/#overview","title":"Overview","text":"<p>Reports are specified as Python code in a country model or a frame that builds from one. Reports that are frequently used and/or infrequently modified for a given country model are often located in it. Project-specific reports or custom configurations of common reports are typically located in the <code>config.py</code> file in a frame.</p> <p>Important</p> <p>The more data items and/or stratification levels a report is configured to capture the larger the files generated.  Keep reporting configurations as minimal as useful for a project to avoid massive files that are difficult to  process.</p>"},{"location":"tutorials/modify_reports/#prerequisites","title":"Prerequisites","text":"<p>This tutorial requires you to have done the following:</p> <ul> <li>Setup and installed emodpy-workflow</li> <li>Created a project and a frame</li> <li>Learned how to run EMOD</li> </ul>"},{"location":"tutorials/modify_reports/#modify-an-existing-report-configuration","title":"Modify an existing report configuration","text":"<p>Here we demonstrate overriding the existing configuration of a report in a project frame that utilizes the  ZambiaForTraining country model.</p> <p>The ZambiaForTraining country model class exists in: <code>emodpy_hiv/countries/zambia.py</code>. The following snippet from the  ZambiaForTraining country model (it inherits from class Zambia above it) indicates its default specification of the  InsetChart report:</p> <pre><code>@classmethod\ndef build_reports(cls, reporters: Reporters) -&gt; Reporters:\n    reporters = super().build_reports(reporters=reporters)\n\n    # ...\n\n    reporters.add(InsetChart(reporters_object=reporters,\n                             has_ip=None,  # default\n                             has_interventions=None,      # default\n                             include_pregnancies=False,   # default\n                             include_coital_acts=True,    # default\n                             event_channels_list=[\"NewInfectionEvent\"]))\n\n    # ...\n</code></pre> <p>If we wish to override this behavior in a project frame without modifying the country model we will need to override it in our frame. Reports are specified as part of the EMOD config file, so we edit the frame file:<code>config.py</code>. This  file typically contains (at minimum) the following function definition ready for us to use:</p> <pre><code>def build_reports(reporters: Reporters):\n    reporters = country_model.build_reports(reporters)\n    return reporters\n</code></pre> <p>Important</p> <p>Each report can only have at most ONE configuration. Duplicative configurations will generate an error.</p> <p>First, remove the existing report that you do not want. Then we add a new definition of the report to replace it. For example, if you want to add information about pregnancies and potential mothers in the model, copy/paste the  InsetChart definition from the ZambiaForTraining country model (again, it inherits this from class Zambia, above it) and modify the appropriate parameter (include_pregnancies=True) (labeled below with NEW CODE):</p> <pre><code>def build_reports(reporters: Reporters):\n    from emodpy_hiv.reporters.reporters import InsetChart\n\n    reporters = country_model.build_reports(reporters)\n\n    # Remove default built-in InsetChart configuration\n    reporters.config_reporters = [reporter for reporter in reporters.config_reporters\n                                  if not isinstance(reporter, InsetChart)]\n\n    # Add new InsetChart configuration that records pregnancy information\n    reporters.add(InsetChart(reporters_object=reporters,\n                             has_ip=None,  # default\n                             has_interventions=None,  # default\n                             # NEW CODE\n                             include_pregnancies=True,  # NOT the default\n                             include_coital_acts=True,  # default\n                             event_channels_list=[\"NewInfectionEvent\"]))\n\n    return reporters\n</code></pre> <p>Future executions of EMOD using this frame will now generate an <code>InsetChart.json</code> output file containing pregnancy related data.</p>"},{"location":"tutorials/modify_reports/#run-emod","title":"Run EMOD","text":"<pre><code>python -m emodpy_workflow.scripts.run -f baseline -N ReportUpdate1 -o reports_output1 -p ContainerPlatform -d output/InsetChart.json\n</code></pre>"},{"location":"tutorials/modify_reports/#plot-insetchartjson","title":"Plot InsetChart.json","text":"<pre><code>python -m emodpy_hiv.plotting.plot_inset_chart reports_output1/ReportUpdate1--0/InsetChart/InsetChart_sample00000_run00001.json\n</code></pre> <p>Example result with pregnancy related information:</p> <p></p>"},{"location":"tutorials/modify_reports/#adding-a-new-report-configuration","title":"Adding a new report configuration","text":"<p>Suppose we now want to add a project-specific report (ReportRelationshipEnd) that is not already included in the  ZambiaForTraining country model or our frame <code>config.py</code>. We will need to add the report in the build_reports  function in our frame. Building on the prior example, we edit the frame <code>config`.py</code> like so (labeled below with  NEW CODE):</p> <pre><code>def build_reports(reporters: Reporters):\n    # NEW CODE: Added import of ReportRelationshipEnd\n    from emodpy_hiv.reporters.reporters import InsetChart, ReportRelationshipEnd\n\n    reporters = country_model.build_reports(reporters)\n\n    # Remove default built-in InsetChart configuration\n    reporters.config_reporters = [reporter for reporter in reporters.config_reporters\n                                  if not isinstance(reporter, InsetChart)]\n\n    # Add new InsetChart configuration that records pregnancy information\n    reporters.add(InsetChart(reporters_object=reporters,\n                             has_ip=None,  # default\n                             has_interventions=None,  # default\n                             include_pregnancies=True,  # NOT the default\n                             include_coital_acts=True,  # default\n                             event_channels_list=[\"NewInfectionEvent\"]))\n\n    # NEW CODE\n    # Add ReportRelationshipEnd report\n    reporters.add(ReportRelationshipEnd(reporters_object=reporters))\n\n    return reporters\n</code></pre> <p>Future executions of EMOD using this frame will now generate an <code>output/RelationshipEnd.csv</code> output file containing information regarding the end of modeled relationships. </p>"},{"location":"tutorials/modify_reports/#run-emod_1","title":"Run EMOD","text":"<pre><code>python -m emodpy_workflow.scripts.run -f baseline -N ReportUpdate2 -o reports_output2 -p ContainerPlatform -d output/InsetChart.json,output/RelationshipEnd.csv\n</code></pre> <p>The result will look something like this sample:</p> <pre><code>Rel_ID,Node_ID,Rel_start_time,Rel_scheduled_end_time,Rel_actual_end_time,Rel_type (0 = TRANSITORY; 1 = INFORMAL; 2 = MARITAL; 3 = COMMERCIAL),Is_rel_outside_PFA,male_ID,female_ID,male_age,female_age,num_total_coital_acts,Termination_Reason\n2,10,0,17.4064,30.4167,0,F,2011,3451,27.9431,24.5602,14,BROKEUP\n24,4,0,23.7031,30.4167,0,F,3405,2075,19.2884,15.1166,12,BROKEUP\n26,3,0,22.5888,30.4167,0,F,2084,14,15.0312,15.8127,6,BROKEUP\n7,9,0,52.7734,60.8333,0,F,2790,5530,31.0045,31.9924,18,BROKEUP\n58,8,30.4167,55.2886,60.8333,0,F,4329,1749,28.4726,22.4222,11,BROKEUP\n15,5,0,47.0391,60.8333,0,F,1046,5376,19.7827,14.0584,19,BROKEUP\n</code></pre>"},{"location":"tutorials/run_calibration/","title":"Run Calibration","text":""},{"location":"tutorials/run_calibration/#what-is-calibration","title":"What is calibration?","text":"<p>Calibration is an iterative process of altering a selection of model hyperparameters in a methodical manner to find sets of parameterizations that well-represent provided observational reference data. It is as much an art as a science, so  this tutorial will focus on the nuts-and-bolts of calibration. Calibrating well is beyond this guide.</p>"},{"location":"tutorials/run_calibration/#start-a-calibration","title":"Start a calibration","text":"<p>The following command will start a calibration of a frame named baseline created in a prior tutorial:</p> <pre><code>python -m emodpy_workflow.scripts.calibrate -N BaselineCalibration -f baseline -i 2 -n 8 -o calibration/ -p ContainerPlatform optim_tool -v 0.1\n</code></pre> <p>While we are waiting for it to complete, we will review some details related to what is actually happening.</p>"},{"location":"tutorials/run_calibration/#configure-a-calibration","title":"Configure a calibration","text":"<p>The <code>calibrate</code> command is the command for model calibration in emodpy-workflow. There are a few basic controls for  the <code>calibrate</code> command that can be used to adjust how long and how deeply it looks for good model parameterizations.  We will briefly review the ones we just used. Further controls are documented by calibrate itself:</p> <pre><code>python -m emodpy_workflow.scripts.calibrate --help\n</code></pre> <p><code>calibrate</code> command controls:</p> <p>-i NUMBER : how many sequential iterations the process will perform, for example,</p> <pre><code>-i 2\n</code></pre> <p>-n NUMBER : how many different parameterizations (simulations) to try per iteration, for example,</p> <pre><code>-n 8\n</code></pre> <p>-N NAME : the name of the calibration to perform, various uses, for example,</p> <pre><code>-N BaselineCalibration\n</code></pre> <p>Very generally, more iterations and more parameterizations per iteration yield better results but increase computation time/cost.</p> <p><code>optim_tool</code> algorithm command controls:</p> <p>optim_tool is the algorithm we selected for scoring parameterizations.</p> <p>-v FRACTION (0.0-1.0) : the fraction of hyperparameter space to explore in an iteration. Lower means the algorithm takes small steps from its current best parameterization, higher means to take larger steps, for example,</p> <pre><code>optim_tool -v 0.1\n</code></pre>"},{"location":"tutorials/run_calibration/#ingest-forms-reference-data-and-analysis-controls","title":"Ingest forms (reference data and analysis controls)","text":"<p>The goal of calibration is to find model configurations that can reasonably match reference data. This requires:</p> <ul> <li>reference data</li> <li>model output generation</li> <li>a scoring system for model output (good or bad, better or worse)</li> </ul> <p>Running calibrate generates the model output needed. Reference data and scoring systems are defined in an  ingest form, which is a multi-sheet Excel spreadsheet with some embedded helper macros. </p> <p>Additional resources:</p> <ul> <li>Filling an ingest form reference</li> <li>Ingest form how-to</li> </ul>"},{"location":"tutorials/run_calibration/#calibration-output","title":"Calibration output","text":"<p>The above calibration command will put information related to calibration status and simulation scoring into the directory: <code>calibration/BaselineCalibration</code> (calibration name). The highest-numbered directory of iteration information (like iter1 in our example) contains pdf plots of information relevant to the progress of calibration and can provide information to aid in determining if the current set of hyperparameters being modified are sufficient.</p>"},{"location":"tutorials/run_calibration/#resample-a-calibration-process-selecting-parameterizations","title":"Resample a calibration process (selecting parameterizations)","text":"<p>Resampling a calibration is the process of selecting parameterizations from a calibration process. There is more than one algorithm for doing so. The selected parameterizations are a calibration (good, bad, in progress, etc.).</p> <p>emodpy-workflow has a built-in command named resample for this process. The following command will select the four simulations from the above calibration command output that best match the reference data in the ingest form, writing them to a CSV file:</p> <pre><code>python -m emodpy_workflow.scripts.resample -d calibration/BaselineCalibration -m best -n 4 -o samples.csv\n</code></pre> <p>Important</p> <p>A resampled csv file is a calibration (good, bad, in progress, etc.)</p>"},{"location":"tutorials/run_calibration/#plot-the-calibration","title":"Plot the calibration","text":"<p>Now what we have a calibration (a resampled CSV file), we can plot it with reference data to visually assess its  performance. The built-in emodpy-workflow command for this is plot_sims_with_reference . Continuing the example,  the following will plot female HIV prevalance in the four resampled simulations with overlain reference data:</p> <pre><code>python -m emodpy_workflow.scripts.plot_sims_with_reference -f baseline -s samples.csv -c Prevalence -g Female -p ContainerPlatform\n</code></pre> <p>The resultant plots are written by default to directory plot_sims_with_reference_output. Take a look, for example,</p> <p></p>"},{"location":"tutorials/run_calibration/#what-is-next-using-a-calibration","title":"What is next? Using a calibration!","text":"<p>Good calibrations are the starting point for modeling real-world scientific questions. In emodpy-workflow, calibrations are used as input to the <code>run</code> command, which can combine calibrated parameterizations with \"what if\" scenario/sweep parameterizations. This is often simply called \"running scenarios\" or \"performing a sweep\".</p> <p>Additional resources:</p> <ul> <li>Sweep parameters tutorial</li> <li>How to sweep</li> </ul>"},{"location":"tutorials/run_emod/","title":"Run EMOD","text":""},{"location":"tutorials/run_emod/#objective","title":"Objective","text":"<p>The goal of this tutorial is for you to learn how to run a single simulation of EMOD-HIV using emodpy-workflow.  There are many ways to run EMOD:</p> <ul> <li>From the command line</li> <li>Using emodpy-hiv</li> <li>Using emodpy-workflow</li> <li>On an HPC</li> <li>On your laptop</li> <li>As part of a parameter calibration</li> <li>As a parameter sweep</li> </ul> <p>However, you will frequently want to run a single simulation when you creating different behaviors in your simulation or while debugging.</p>"},{"location":"tutorials/run_emod/#prerequisites","title":"Prerequisites","text":"<p>To run EMOD per the instructions of this tutorial, you need to have done the followinng:</p> <ul> <li>Setup and installed emodpy-workflow</li> <li>Created a project and a frame</li> </ul>"},{"location":"tutorials/run_emod/#control-how-and-where-emod-runs","title":"Control how and where EMOD runs","text":"<p>Before we can start using the \"run\" command, we first need to know where we can control the what and where EMOD runs.  The manifest.py file is used by emopdy-workflow to know what EMOD executable binary to use, to specify a container for the executable binary to run in, to specify any simulation post processing scripts, etc. The idmtools.ini file is used to specify how EMOD is run on different platforms, where a \"platform\" is a computing device like an HPC or laptop.</p>"},{"location":"tutorials/run_emod/#view-manifestpy","title":"View manifest.py","text":"<ol> <li>In the root of your project directory, open the <code>manifest.py</code> file.</li> <li>On about line 39, you should see a variable called <code>executable_path</code>.  This tells emodpy-workflow where to get the EMOD executable binary.</li> <li>Just below that you should also see a variable called <code>asset_collection_of_container</code>. This is variable is used by emodpy-workflow to know what container to run EMOD in. (Containers reduce your need to install everything needed to run EMOD.)</li> <li>For more information see manifest.py.</li> </ol>"},{"location":"tutorials/run_emod/#view-idmtoolsini","title":"View idmtools.ini","text":"<ol> <li>In the root of your project directory, open the <code>idmtools.ini</code> file.</li> <li> <p>Towards the top of the file, you should see something similar to the following:</p> <pre><code>[ContainerPlatform]\ntype          = Container\njob_directory = emodpy-jobs\n</code></pre> </li> <li> <p>This tells emodpy-workflow that there is a platform called <code>ContainerPlatform</code> that is of type <code>Container</code> and that simulation jobs should go in to the <code>emodpy-jobs</code> directory.</p> </li> <li>For more information see idmtools.ini.</li> </ol>"},{"location":"tutorials/run_emod/#create-a-results-directory","title":"Create a <code>results</code> directory","text":"<p>Since we will be running EMOD multiple times, it is handy to put the results into their own directory.</p> <ol> <li> <p>Execute the following command in the root of your project (the directory that contains the <code>manifest.py</code> file):</p> <pre><code>mkdir results\n</code></pre> <p>This should create a directory called <code>results</code> in your project directory.</p> </li> </ol>"},{"location":"tutorials/run_emod/#using-the-run-command","title":"Using the <code>run</code> command","text":"<p>To run EMOD, we will use the emodpy-workflow <code>run</code> command.</p> <ol> <li> <p>Execute the following command in the root of your project:</p> <pre><code>python -m emodpy_workflow.scripts.run -h\n</code></pre> <p>This should produce output similar to the following:</p> <pre><code>usage: run.py [-h] [-s SAMPLES_FILE] -N SUITE_NAME -f FRAMES [-d DOWNLOAD_FILENAMES] -o OUTPUT_DIR -p PLATFORM\n            [-w SWEEP]\n\noptional arguments:\n-h, --help            show this help message and exit\n-s SAMPLES_FILE, --samples SAMPLES_FILE\n                        csv file with base samples to use for simulation generation. Runs one sim per frame with\n                        configs as-is if not provided.\n-N SUITE_NAME, --suite-name SUITE_NAME\n                        Name of suite for experiments to be run within (Required).\n-f FRAMES, --frames FRAMES\n                        Comma-separated list of model frames to run (Required).\n-d DOWNLOAD_FILENAMES, --files DOWNLOAD_FILENAMES\n                        Filenames to download from scenario simulations. Paths relative to simulation directories.\n                        Comma-separated list if more than one (Default: do not download files)\n-o OUTPUT_DIR, --output-dir OUTPUT_DIR\n                        Directory to write receipt to (always) and scenario output files (if downloading).\n-p PLATFORM, --platform PLATFORM\n                        Platform to run simulations on (Required).\n-w SWEEP, --sweep SWEEP\n                        Python module to load with a sweep definition to generate extra experiments with (Default: no\n                        sweeping).\n</code></pre> </li> <li> <p>For our purposes, we are going to focus on the following arguments:</p> <ul> <li>suite name - This is the name you give to a collection of experiments, 'my_first_suite'.</li> <li>frame - This is the name of the frame who's configuration is what you want to use. In our case, it will be 'baseline'</li> <li>output directory - The path of the directory to put the data for your run, say 'results/my_first_run'.</li> <li>platform - This is the name of a platform defined in your 'idmtools.ini' file. We will be using 'ContainerPlatform'.</li> </ul> </li> <li> <p>Execute the following command:</p> <pre><code>python -m emodpy_workflow.scripts.run -N my_first_suite -f baseline -o results/my_first_run -p ContainerPlatform\n</code></pre> <p>You should see output similar to the following:</p> WindowsLinux <pre><code>INI File Found: C:\\work\\emodpy-training\\idmtools.ini\n\nInitializing ContainerPlatform with:\n{\n\"job_directory\": \"emodpy-jobs\"\n}\nCreating Suites: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;?, ?suite/s]\nCreating Experiments:   0%|                                                              | 0/1 [00:00&lt;?, ?experiment/s]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\nTotal parameter access counts:\n{}\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\nCreating Experiments: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:06&lt;00:00,  6.50s/experiment]\nInitializing objects for creation: 0simulation [00:00, ?simulation/s]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\nTotal parameter access counts:\n{}\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\nCommissioning Simulations: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00, 17.86simulation/s]\njob_directory: C:\\work\\emodpy-training\\emodpy-jobs\nsuite: 2cf29edc-6b4d-459b-9542-3eae5c59a151\nexperiment: 8ae683e4-8af6-4cd9-b8a3-5c63a5a10a17\n\nExperiment Directory:\nC:\\work\\emodpy-training\\emodpy-jobs\\my_first_suite_2cf29edc-6b4d-459b-9542-3eae5c59a151\\my_first_suite_8ae683e4-8af6-4cd9-b8a3-5c63a5a10a17\n\nContainer ID: c3a6a8de63be\n\nYou may try the following command to check simulations running status:\nidmtools container status 8ae683e4-8af6-4cd9-b8a3-5c63a5a10a17\nWrote run.py receipt to: results/my_first_run\\experiment_index.csv\nDone with model experiment creation.\n</code></pre> <pre><code>INI File Found: /home/internal.idm.ctr/dbridenbecker/emodpy/my_tutorial/my_project/idmtools.ini\n\nInitializing ContainerPlatform with:\n{\n\"job_directory\": \"emodpy-jobs\"\n}\nCreating Suites: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00, 1602.10suite/s]\nCreating Experiments:   0%|                                                                                   | 0/1 [00:00&lt;?, ?experiment/s]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\nTotal parameter access counts:\n{}\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\nCreating Experiments: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:05&lt;00:00,  5.15s/experiment]\nInitializing objects for creation: 0simulation [00:00, ?simulation/s]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\nTotal parameter access counts:\n{}\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\nCommissioning Simulations: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00, 67.47simulation/s]\njob_directory: /home/internal.idm.ctr/dbridenbecker/emodpy/my_tutorial/my_project/emodpy-jobs\nsuite: 38dbabe0-e7f7-49ee-a8f3-983f3657b01d\nexperiment: 07c1fa36-2f8b-41f0-a7fe-1afdf5e6233a\n\nExperiment Directory: \n/home/internal.idm.ctr/dbridenbecker/emodpy/my_tutorial/my_project/emodpy-jobs/my_first_suite_38dbabe0-e7f7-49ee-a8f3-983f3657b01d/my_first_suite_07c1fa36-2f8b-41f0-a7fe-1afdf5e6233a\n\nContainer ID: c4d227306f49\n\nYou may try the following command to check simulations running status: \nidmtools container status 07c1fa36-2f8b-41f0-a7fe-1afdf5e6233a\nWrote run.py receipt to: results/my_first_run/experiment_index.csv\nDone with model experiment creation.\n</code></pre> <p>Note</p> <p>This means that the simulations have been submitted to start running. It does not mean they are done.</p> </li> </ol>"},{"location":"tutorials/run_emod/#get-status-on-your-experiment","title":"Get status on your experiment","text":"<p>Notice how in the last four lines of the output that there is information about finding the status of your output.  In this case, the following line</p> WindowsLinux <pre><code>idmtools container status 8ae683e4-8af6-4cd9-b8a3-5c63a5a10a17\n</code></pre> <pre><code>idmtools container status 07c1fa36-2f8b-41f0-a7fe-1afdf5e6233a\n</code></pre> <p>says get status on experiment with the given ID.</p> <p>If you execute that line, you should see something similar to:</p> WindowsLinux <pre><code>INI File Found: C:\\work\\emodpy-training\\idmtools.ini\n\nExperiment Directory:\nc:/work/emodpy-training/emodpy-jobs/my_first_suite_2cf29edc-6b4d-459b-9542-3eae5c59a151/my_first_suite_8ae683e4-8af6-4cd\n9-b8a3-5c63a5a10a17\n\nSimulation Count: 1\n\nSUCCEEDED (1)\nFAILED (0)\nRUNNING (0)\nPENDING (0)\n</code></pre> <pre><code>INI File Found: /home/internal.idm.ctr/dbridenbecker/emodpy/my_tutorial/my_project/idmtools.ini\n\nExperiment Directory: \n/home/internal.idm.ctr/dbridenbecker/emodpy/my_tutorial/my_project/emodpy-jobs/my_first_suite_38dbabe0-e7f7-49ee-a8f3-983f3657b01d/my_first_\nsuite_07c1fa36-2f8b-41f0-a7fe-1afdf5e6233a\n\nSimulation Count: 1\n\nSUCCEEDED (1)\nFAILED (0)\nRUNNING (0)\nPENDING (0)\n</code></pre> <p>Note</p> <p>This only works when using the Container Platform.  To see status when using other platforms, please see the Command Line Interface documentation for your platform.</p>"},{"location":"tutorials/run_emod/#view-the-files-produced-when-running-an-experiment","title":"View the files produced when running an experiment","text":"<p>When using the Container and SLURM platforms, you can access the directories where the experiments and simulations are running.  In our case, we are using the Container Platform and our idmtools.ini file told emodpy-workflow to put the files into a local folder called \"emodpy-jobs\".  If we navigate into this folder, we can see all of the files associated with running the experiment and simulations.  Let's go investigate.</p> <ol> <li> <p>From the main project directory execute the following commands:</p> WindowsLinux <pre><code>cd emodpy-jobs\ndir\n</code></pre> <pre><code>cd emodpy-jobs\nls -l\n</code></pre> <p>You should see something similar to:</p> WindowsLinux <pre><code>Directory of C:\\work\\my_training\\my_project\\emodpy-jobs\n\n09/02/2025  01:30 PM    &lt;DIR&gt;          .\n09/02/2025  01:30 PM    &lt;DIR&gt;          ..\n09/02/2025  01:30 PM    &lt;DIR&gt;          my_first_suite_2f7f3943-0814-418a-9792-604fc7db2a31\n</code></pre> <pre><code>total 4\ndrwxrwxr-x 3 dbridenbecker dbridenbecker 4096 Sep  5 12:32 my_first_suite_38dbabe0-e7f7-49ee-a8f3-983f3657b01d\n</code></pre> <p>Notice the directory <code>my_first_suite_2f7f3943-0814-418a-9792-604fc7db2a31</code> starts with the name we gave the suite.</p> </li> <li> <p>Look in the the suite directory by executing commands similar to the following (your directory name is likely different):</p> WindowsLinux <pre><code>cd my_first_suite_2f7f3943-0814-418a-9792-604fc7db2a31\ndir\n</code></pre> <pre><code>cd my_first_suite_38dbabe0-e7f7-49ee-a8f3-983f3657b01d\nls -l\n</code></pre> <p>You should see something similar to the following:</p> WindowsLinux <pre><code>Directory of C:\\work\\my_training\\my_project\\emodpy-jobs\\my_first_suite_2f7f3943-0814-418a-9792-604fc7db2a31\n\n09/02/2025  01:30 PM    &lt;DIR&gt;          .\n09/02/2025  01:30 PM    &lt;DIR&gt;          ..\n09/02/2025  01:30 PM               484 metadata.json\n09/02/2025  01:30 PM    &lt;DIR&gt;          my_first_suite_857c15be-a4b9-4d46-86f5-d0c0f9a2fbe5\n</code></pre> <pre><code>total 8\n-rw-rw-r-- 1 dbridenbecker dbridenbecker  515 Sep  5 12:32 metadata.json\ndrwxrwxr-x 4 dbridenbecker dbridenbecker 4096 Sep  5 12:32 my_first_suite_07c1fa36-2f8b-41f0-a7fe-1afdf5e6233a\n</code></pre> <p>Yes, it looks very similar, but this is the experiment directory.</p> </li> <li> <p>Look in the experiment directory by executing commands similar to the following (your directory name is likely different):     === \"Windows\"         <pre><code>cd my_first_suite_857c15be-a4b9-4d46-86f5-d0c0f9a2fbe5\ndir\n</code></pre>     === \"Linux\"         <pre><code>cd my_first_suite_07c1fa36-2f8b-41f0-a7fe-1afdf5e6233a\nls -l\n</code></pre></p> <p>You should see something similar to the following:</p> WindowsLinux <pre><code>Directory of C:\\work\\my_training\\my_project\\emodpy-jobs\\my_first_suite_2f7f3943-0814-418a-9792-604fc7db2a31\\my_first_suite_857c15be-a4b9-4d46-86f5-d0c0f9a2fbe5\n\n09/02/2025  01:30 PM    &lt;DIR&gt;          .\n09/02/2025  01:30 PM    &lt;DIR&gt;          ..\n09/02/2025  01:30 PM    &lt;DIR&gt;          84efd93c-b13a-4bd4-ae54-f4ac5ab7aa9d\n09/02/2025  01:30 PM    &lt;DIR&gt;          Assets\n09/02/2025  01:30 PM               229 batch.sh\n09/02/2025  01:30 PM             1,006 metadata.json\n09/02/2025  01:30 PM               179 run_simulation.sh\n09/02/2025  01:30 PM                 0 stderr.txt\n09/02/2025  01:30 PM               181 stdout.txt\n</code></pre> <pre><code>total 24\ndrwxrwxr-x 3 dbridenbecker dbridenbecker 4096 Sep  5 12:32 45eefc10-bf1d-48bf-a7f0-d90d1c94bd8f\ndrwxrwxr-x 2 dbridenbecker dbridenbecker 4096 Sep  5 12:32 Assets\n-rwxrwxrwx 1 dbridenbecker dbridenbecker  229 Sep  5 12:32 batch.sh\n-rw-rw-r-- 1 dbridenbecker dbridenbecker 1067 Sep  5 12:32 metadata.json\n-rwxrwxrwx 1 dbridenbecker dbridenbecker  179 Sep  5 12:32 run_simulation.sh\n-rw-r--r-- 1 root          root             0 Sep  5 12:32 stderr.txt\n-rw-r--r-- 1 root          root           181 Sep  5 12:32 stdout.txt\n</code></pre> <p>The experiment directory will have one folder for each simulation of the experiment.  In this case, there is only one simulation with ID:</p> WindowsLinux <p><code>84efd93c-b13a-4bd4-ae54-f4ac5ab7aa9d</code></p> <p><code>45eefc10-bf1d-48bf-a7f0-d90d1c94bd8f</code></p> <p>For the most part, you do not need to know about the other files in the directory. However, the <code>metadata.json</code> file does contain some details about the experiment and its simulations.</p> </li> <li> <p>Look in the simulation directory <code>84efd93c-b13a-4bd4-ae54-f4ac5ab7aa9d</code></p> WindowsLinux <pre><code>cd 84efd93c-b13a-4bd4-ae54-f4ac5ab7aa9d\ndir\n</code></pre> <pre><code>cd 45eefc10-bf1d-48bf-a7f0-d90d1c94bd8f\nls -l\n</code></pre> <p>You should see something similar to the following:</p> WindowsLinux <pre><code>Directory of C:\\work\\my_training\\my_project\\emodpy-jobs\\my_first_suite_2f7f3943-0814-418a-9792-604fc7db2a31\\my_first_suite_857c15be-a4b9-4d46-86f5-d0c0f9a2fbe5\\84efd93c-b13a-4bd4-ae54-f4ac5ab7aa9d\n\n09/02/2025  01:30 PM    &lt;DIR&gt;          .\n09/02/2025  01:30 PM    &lt;DIR&gt;          ..\n09/02/2025  01:30 PM    &lt;SYMLINKD&gt;     Assets [..\\Assets]\n09/02/2025  01:30 PM           206,144 campaign.json\n09/02/2025  01:30 PM             7,226 config.json\n09/02/2025  01:32 PM                 2 job_status.txt\n09/02/2025  01:30 PM             9,310 metadata.json\n09/02/2025  01:32 PM    &lt;DIR&gt;          output\n09/02/2025  01:32 PM            30,139 status.txt\n09/02/2025  01:30 PM                 0 stderr.txt\n09/02/2025  01:32 PM           120,255 stdout.txt\n09/02/2025  01:30 PM           330,404 tmpncr6smi4.json\n09/02/2025  01:30 PM               762 _run.sh\n</code></pre> <pre><code>total 704\nlrwxrwxrwx 1 dbridenbecker dbridenbecker      9 Sep  5 12:32 Assets -&gt; ../Assets\n-rw-rw-r-- 1 dbridenbecker dbridenbecker 206144 Sep  5 12:32 campaign.json\n-rw-rw-r-- 1 dbridenbecker dbridenbecker   7257 Sep  5 12:32 config.json\n-rw-r--r-- 1 root          root               2 Sep  5 12:34 job_status.txt\n-rw-rw-r-- 1 dbridenbecker dbridenbecker   9393 Sep  5 12:32 metadata.json\ndrwxr-xr-x 2 root          root            4096 Sep  5 12:34 output\n-rwxrwxrwx 1 dbridenbecker dbridenbecker    762 Sep  5 12:32 _run.sh\n-rw-r--r-- 1 root          root           30139 Sep  5 12:34 status.txt\n-rw-r--r-- 1 root          root               0 Sep  5 12:32 stderr.txt\n-rw-r--r-- 1 root          root          120255 Sep  5 12:34 stdout.txt\n-rw-rw-r-- 1 dbridenbecker dbridenbecker 320723 Sep  5 12:32 tmpu8tbs9qp.json\n</code></pre> <p>The simulation directory is the directory where a single realization/simulation of EMOD is being run.  If you have simulations that are failing or not running to completion, you should look at the <code>stderr.txt</code> file and the <code>stdout.txt</code> file. These files can contain error messages directly from the EMOD executable.  Finally, the <code>output</code> directory contains the report data that was generated for this realization/simulation.  (We will be using the <code>download</code> command to organize our report files, but if that becomes limiting, you can access them directly.)</p> <p>Note</p> <p>If something is failing or not working like you expect, an EMOD developer will need the contents of this directory in order to duplicate and debug the issue.</p> </li> <li> <p>View the end of the <code>stdout.txt</code> file.</p> <p>Use a text editor to view <code>stdout.txt</code> file and scroll to the bottom.  You should see something similar to the following:</p> <pre><code>00:01:56 [0] [I] [Simulation] Update(): Time: 32606.4 Year: 2049.8 Rank: 0 StatPop: 102414 Infected: 529\n00:01:57 [0] [I] [Simulation] Update(): Time: 32636.8 Year: 2049.9 Rank: 0 StatPop: 102636 Infected: 528\n00:01:57 [0] [I] [Simulation] Finalizing 'InsetChart.json' reporter.\n00:01:57 [0] [I] [Simulation] Finalized  'InsetChart.json' reporter.\n00:01:57 [0] [I] [Simulation] Finalizing 'ReportHIVByAgeAndGender.csv' reporter.\n00:01:57 [0] [I] [Simulation] Finalized  'ReportHIVByAgeAndGender.csv' reporter.\n00:01:57 [0] [I] [Eradication] Controller executed successfully.\n</code></pre> <p>The <code>stdout.txt</code> file contains information that EMOD can log to standard out. For example, the line that has <code>[Simulation] Update(): Time:</code> in it is printed each time step of the simulation.  Seeing these being written out can be helpful to know that the simulation is still running.  The line that contains <code>Controller executed successfully</code> lets us know that the simulation has finished. This file can contain warnings or error messages.  This can be a great place to look when starting to debug why your simulations are not running.</p> </li> <li> <p>Go back to the project directory - <code>my_project</code></p> WindowsLinux <pre><code>cd ..\ncd ..\ncd ..\ncd ..\ncd\n</code></pre> <pre><code>cd ..\ncd ..\ncd ..\ncd ..\npwd\n</code></pre> <p>You should see something similar to:</p> WindowsLinux <pre><code>C:\\work\\my_training\\my_project&gt;\n</code></pre> <pre><code>/home/internal.idm.ctr/dbridenbecker/emodpy/my_tutorial/my_project\n</code></pre> <p>You should be back to your project directory.</p> </li> </ol>"},{"location":"tutorials/run_emod/#view-the-resultsmy_first_run-folder-and-the-receipt-file","title":"View the <code>results/my_first_run</code> folder and the \"receipt file\"","text":"<p>In our <code>run</code> command, you specified the output as <code>-o results/my_first_run</code>.</p> <ol> <li> <p>Look at the contents of the <code>results/my_first_run</code> folder</p> WindowsLinux <pre><code>dir results\\my_first_run\n</code></pre> <pre><code>ls -l results/my_first_run\n</code></pre> <p>You should see something similar to the following:</p> WindowsLinux <pre><code>Directory of C:\\work\\my_training\\my_project\\results\\my_first_run\n\n09/02/2025  02:52 PM    &lt;DIR&gt;          .\n09/02/2025  02:52 PM    &lt;DIR&gt;          ..\n09/02/2025  01:30 PM               275 experiment_index.csv\n</code></pre> <pre><code>total 4\n-rw-rw-r-- 1 dbridenbecker dbridenbecker 309 Sep  5 12:32 experiment_index.csv\n</code></pre> </li> <li> <p>Look at the contents of the <code>results/my_first_run/experiment_index.csv</code></p> WindowsLinux <pre><code>type results\\my_first_run\\experiment_index.csv\n</code></pre> <pre><code>cat results/my_first_run/experiment_index.csv\n</code></pre> <p>You should see something similar to the following:</p> WindowsLinux <pre><code>index,frame,experiment_id,experiment_name,experiment_directory\n0,baseline,857c15be-a4b9-4d46-86f5-d0c0f9a2fbe5,my_first_suite,C:\\work\\my_training\\my_project\\emodpy-jobs\\my_first_suite_2f7f3943-0814-418a-9792-604fc7db2a31\\my_first_suite_857c15be-a4b9-4d46-86f5-d0c0f9a2fbe5\n</code></pre> <pre><code>index,frame,experiment_id,experiment_name,experiment_directory\n0,baseline,07c1fa36-2f8b-41f0-a7fe-1afdf5e6233a,my_first_suite,/home/internal.idm.ctr/dbridenbecker/emodpy/my_tutorial/my_project/emodpy-jobs/my_first_suite_38dbabe0-e7f7-49ee-a8f3-983f3657b01d/my_first_suite_07c1fa36-2f8b-41f0-a7fe-1afdf5e6233a\n</code></pre> <p>This file can provide you information about the experiment and where the files are located.  We will use it in our next step to download the report data.</p> </li> </ol>"},{"location":"tutorials/run_emod/#download-the-resultsoutputreports","title":"Download the results/output/reports","text":"<p>Now that we have seen all of the files created when running an experiment, let's get back to our project directory and get our report data.</p> <ol> <li> <p>Execute the <code>download</code> command to see what the options are</p> <pre><code>python -m emodpy_workflow.scripts.download -h\n</code></pre> <p>You should see something similar to the following:</p> <pre><code>(env) C:\\work\\my_training\\my_project&gt;python -m emodpy_workflow.scripts.download -h\nusage: download.py [-h] [-d FILES] [-r RECEIPT_FILE] [-s SAMPLES_FILE] [--suite-id SUITE_ID] [--exp-id EXPERIMENT_ID]\n                [-o OUTPUT_DIR] -p PLATFORM\n\noptional arguments:\n-h, --help            show this help message and exit\n-d FILES, --files FILES\n                        Comma-separated list of simulation directory relative file paths to download (Default:\n                        output\\ReportHIVByAgeAndGender.csv)\n-r RECEIPT_FILE, --receipt RECEIPT_FILE\n                        Commissioning receipt file path. Either set -r OR (--suite-id and -o) OR (--exp-id and -o) OR\n                        (-s and -o).\n-s SAMPLES_FILE, --samples SAMPLES_FILE\n                        Resampled parameter sets csv file of simulations to plot. Either set -r OR (--suite-id and -o)\n                        OR (--exp-id and -o) OR (-s and -o).\n--suite-id SUITE_ID   Id of suite to download simulations from. Either set -r OR (--suite-id and -o) OR (--exp-id\n                        and -o) OR (-s and -o).\n--exp-id EXPERIMENT_ID\n                        Id of experiment to download simulations from. Either set -r OR (--suite-id and -o) OR (--exp-\n                        id and -o) OR (-s and -o).\n-o OUTPUT_DIR, --output-dir OUTPUT_DIR\n                        Directory to write output into. Either set -r OR (--suite-id and -o) OR (--exp-id and -o) OR\n                        (-s and -o).\n-p PLATFORM, --platform PLATFORM\n                        Platform to download from (Required).\n</code></pre> </li> <li> <p>Execute the <code>download</code> command to download the InsetChart.json files</p> WindowsLinux <pre><code>python -m emodpy_workflow.scripts.download -d \"output/InsetChart.json\" -r results\\my_first_run\\experiment_index.csv -p ContainerPlatform\n</code></pre> <pre><code>python -m emodpy_workflow.scripts.download -d \"output/InsetChart.json\" -r results/my_first_run/experiment_index.csv -p ContainerPlatform\n</code></pre> <p>In this command, we specified the following:</p> <ul> <li><code>-d \"output/InsetChart.json</code> - EMOD puts the report files into a subfolder called \"outputs\".  In this case, we want the InsetChart.json report since it contains a lot of high level statistics.</li> <li><code>-r results/my_first_run/experiment_index.csv</code> - Since we have a \"receipt\" file, we use it here to tell the <code>download</code> command where the data is.</li> <li><code>-p ContainerPlatform</code> - This tells the <code>download</code> command to use the Container protocol when getting data.</li> </ul> <p>You should see something similar to the following:</p> <pre><code>INI File Found: /home/internal.idm.ctr/dbridenbecker/emodpy/my_tutorial/my_project/idmtools.ini\n\nInitializing ContainerPlatform with:\n{\n\"job_directory\": \"emodpy-jobs\"\n}\nWaiting on Experiment my_first_suite to Finish running: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00, 2343.19simulation/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00, 25.25it/s]\nRunning Analyzer Reduces: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1/1 [00:00&lt;00:00, 465.67it/s]\nDone downloading files to: /home/internal.idm.ctr/dbridenbecker/emodpy/my_tutorial/my_project/results/my_first_run\n</code></pre> <p>As you can tell, there are many ways to specify the download of the data. The how-tos can show you different ways to do it.</p> </li> <li> <p>See that a new folder was added to the `results/my_first_run:</p> WindowsLinux <pre><code>dir results\\my_first_run\n</code></pre> <pre><code>ls -l results/my_first_run\n</code></pre> <p>Now when we look in this folder we should see something similar to the following:</p> WindowsLinux <pre><code>Directory of C:\\work\\my_training\\my_project\\results\\my_first_run\n\n09/02/2025  02:52 PM    &lt;DIR&gt;          .\n09/02/2025  02:52 PM    &lt;DIR&gt;          ..\n09/02/2025  01:30 PM               275 experiment_index.csv\n09/02/2025  02:52 PM    &lt;DIR&gt;          my_first_suite--0\n</code></pre> <pre><code>total 8\n-rw-rw-r-- 1 dbridenbecker dbridenbecker  309 Sep  5 12:32 experiment_index.csv\ndrwxrwxr-x 3 dbridenbecker dbridenbecker 4096 Sep  5 15:00 my_first_suite--0\n</code></pre> <p>The <code>my_first_suite--0</code> directory was created.</p> </li> <li> <p>See that a folder was created with the name of the report:</p> WindowsLinux <pre><code>dir results\\my_first_run\\my_first_suite--0\n</code></pre> <pre><code>ls -l results/my_first_run/my_first_suite--0\n</code></pre> <p>You should see something similar to the following:</p> WindowsLinux <pre><code>Directory of C:\\work\\my_training\\my_project\\results\\my_first_run\\my_first_suite--0\n\n09/02/2025  02:52 PM    &lt;DIR&gt;          .\n09/02/2025  02:52 PM    &lt;DIR&gt;          ..\n09/02/2025  02:52 PM    &lt;DIR&gt;          InsetChart\n</code></pre> <pre><code>total 4\ndrwxrwxr-x 2 dbridenbecker dbridenbecker 4096 Sep  5 15:00 InsetChart\n</code></pre> <p>Notice that <code>InsetChart</code> is the base name of the report file we requested to download.</p> </li> <li> <p>See where the data has been put by executing the following command:</p> WindowsLinux <pre><code>dir results\\my_first_run\\my_first_suite--0\\InsetChart\n</code></pre> <pre><code>ls -l results/my_first_run/my_first_suite--0/InsetChart\n</code></pre> <p>You should see something similar to the following:</p> WindowsLinux <pre><code>Directory of C:\\work\\my_training\\my_project\\results\\my_first_run\\my_first_suite--0\\InsetChart\n\n09/02/2025  02:52 PM    &lt;DIR&gt;          .\n09/02/2025  02:52 PM    &lt;DIR&gt;          ..\n09/02/2025  02:52 PM           300,997 InsetChart_sample00000_run00001.json\n</code></pre> <pre><code>total 296\n-rw-rw-r-- 1 dbridenbecker dbridenbecker 300997 Sep  5 15:00 InsetChart_sample00000_run00001.json\n</code></pre> <p>The directory should contain one file for each simulation of the experiment. In this case, there is only one.</p> </li> </ol>"},{"location":"tutorials/run_emod/#plot-the-results","title":"Plot the results","text":"<p>Now that we have our data downloaded, let's plot the data to see what happened in the simulation.</p> <ol> <li> <p>Execute the following command to see what options are available when plotting InsetChart.</p> <pre><code>python -m emodpy_hiv.plotting.plot_inset_chart -h\n</code></pre> <p>You should see something similar to the following:</p> <pre><code>(env) C:\\work\\my_training\\my_project&gt;python -m emodpy_hiv.plotting.plot_inset_chart -h\nusage: plot_inset_chart.py [-h] [-d [DIR]] [-t [TITLE]] [-o OUTPUT]\n                        [reference] [comparison1] [comparison2] [comparison3]\n\npositional arguments:\nreference             Reference InsetChart filename\ncomparison1           Comparison1 InsetChart filename\ncomparison2           Comparison2 InsetChart filename\ncomparison3           Comparison3 InsetChart filename\n\noptional arguments:\n-h, --help            show this help message and exit\n-d [DIR], --dir [DIR]\n                        Directory, or parent directory that contains subdirectories, of InsetChart.json files\n-t [TITLE], --title [TITLE]\n                        Title of Plot\n-o OUTPUT, --output OUTPUT\n                        If provided, a directory will be created and images saved to the folder. If not provided, it\n                        opens windows.\n</code></pre> <p>Note</p> <p>If you are executing these commands via SSH or on Codespaces, you will need to use the <code>-o</code> or <code>--output</code> option to create an image file that you can view.</p> </li> <li> <p>Execute the following command to plot the data in InsetChart.json:</p> WindowsLinux <pre><code>python -m emodpy_hiv.plotting.plot_inset_chart -d results\\my_first_run\\my_first_suite--0\\InsetChart\n</code></pre> <pre><code>python -m emodpy_hiv.plotting.plot_inset_chart -d results/my_first_run/my_first_suite--0/InsetChart\n</code></pre> <p>This should produce an image or window that looks like the following:</p> <p></p> <p>If we look at the plot in column three, row three, you see something like the following:</p> <p></p> <p>where prevalence goes up to about 1.5% in the middle of the simulation and then declines to about 0.5%.</p> </li> </ol>"},{"location":"tutorials/run_emod/#next-up-modifying-the-simulation","title":"Next up: Modifying the simulation","text":"<p>Now that you have run EMOD once, investigate the other tutorials where you can modify the simulation and run the model.</p> <ul> <li>Modify Reports</li> <li>Modify Configuration</li> <li>Modify Campaign</li> </ul>"},{"location":"tutorials/setup/","title":"Setup and Installation","text":""},{"location":"tutorials/setup/#choose-to-run-the-tutorials-locally-or-use-github-codespaces","title":"Choose to run the tutorials locally or use GitHub Codespaces.","text":"<ul> <li> <p>Locally - To run locally, you will need to install the prerequisites as well as emodpy-workflow.  If this looks challenging, you run into issues, or is just more than you want to do, consider using GitHub Codespaces</p> <p>Note</p> <p>For the tutorials, \"local\" running assumes that you are running on you laptop/desktop/VM.  EMOD can run on a High Performance Computing (HPC) cluster, but the instructions here will not address that.</p> </li> <li> <p>GitHub Codespaces - It will allow you to run EMOD in the cloud and skip installation.  Once you decide you want to do more with EMOD, you can come back and install EMOD locally.</p> </li> </ul>"},{"location":"tutorials/setup/#set-up-locally","title":"Set up locally","text":"<ol> <li> <p>Install any prerequisites according to the installation instructions.</p> </li> <li> <p>Create a new directory for your project files.</p> <p>Like for your own projects, the tutorials assume that you will have a directory for the virtual environment and the files for your project.  Create a directory using the following commands:</p> <pre><code>mkdir my_tutorial\ncd my_tutorial\n</code></pre> </li> <li> <p>Go back to the installation. Set up the virtual environment and install emodpy-workflow.</p> </li> <li> <p>Verify that you are in the correct directory using the command below:</p> WindowsLinux <pre><code>cd\n</code></pre> <pre><code>pwd\n</code></pre> <p>You should see something like the following where the last name is the directory you created like <code>my_tutorial</code>.</p> WindowsLinux <pre><code>C:\\work\\my_tutorial\n</code></pre> <pre><code>/home/dbridenbecker/my_tutorial\n</code></pre> <p>You should be ready to start the tutorial.</p> </li> </ol>"},{"location":"tutorials/setup/#set-up-codespaces","title":"Set up codespaces","text":"<p>Costs</p> <p>Your personal GitHub account comes with 120 core hours of FREE usage.  Unless you have been using your free time on other products, this should be plenty of time to do the tutorials.  To find out more about the costs, see GitHub Codespaces billing</p> <ol> <li> <p>Login to your GitHub account.</p> <p>You must have a GitHub account to use Codespaces.</p> </li> <li> <p>Navigate your browser to the following URL:</p> <p>https://github.com/EMOD-Hub/emodpy-workflow</p> </li> <li> <p>Following the instructions at Creating a codespace for a repository.</p> <p>You can ignore the section on \"Recommended secrets\".</p> <p>When it is done with the \"post-creation setup,\" you should be able to use the codespace.</p> </li> <li> <p>Test that the code space is ready to use by executing the following command:</p> <pre><code>pip freeze\n</code></pre> </li> </ol> <p>If you see a list of python packages, the code space is setup.</p> <ol> <li> <p>Create a new directory for your project files.</p> <p>Similarly to the local installation, we want to create a directory where we will be running the tutorial.  We won't have a virtual environment because we expect to throw everything away.  Execute the following commands:</p> <pre><code>cd ..\nmkdir my_tutorial\ncd my_tutorial\n</code></pre> </li> </ol>"},{"location":"tutorials/setup/#stopping-and-restarting-a-codespace","title":"Stopping and restarting a codespace","text":"<p>You will have times that either you need to stop your codespace or it stops automatically.  For example, if you need to quit working on a tutorial because you have a meeting, you will want to stop the codespace and restart it when you have time to work on it.  See the instructions on stopping and starting a codespace to learn how.</p>"},{"location":"tutorials/setup/#deleting-a-codespace","title":"Deleting a codespace","text":"<p>Even if your codespace is stopped, you can still be charged for storage space. Hence, if you are not going to be using your codespace for an extended period of time, it is recommended that you delete it.  See the instructions on deleting a codespace to learn how.</p>"},{"location":"tutorials/sweep_parameter/","title":"Create Scenarios and Do Sweeps","text":"<p>This tutorial utilizes ParameterizedCalls. The tutorial covering them is located here  and should be completed first.</p>"},{"location":"tutorials/sweep_parameter/#what-is-a-scenario-or-sweep","title":"What is a scenario or sweep?","text":"<p>A scenario (sweep) is a set of hyperparameter values that will be applied to a frame. One can think of them as  \"what if\" scenarios/simulations.</p> <p>Hyperparameter values in a scenario are arbitrary. Every scenario has its own unique set of hyperparameter values that may or may not have any relation to other scenarios, depending on how a user wants to use them.</p> <p>The hyperparameter values in a scenario are always applied last to ensure they have final say in configuration.</p> <p>In emodpy-workflow, scenarios are defined in a Python file with a specific format. This gives the user maximum  flexibility in defining their scenarios while ensuring they can be understood by the <code>run</code> command. These files are often called \"sweep files\".</p>"},{"location":"tutorials/sweep_parameter/#making-scenarios","title":"Making scenarios","text":"<p>The following is an exact requirement for the starting point of a sweep file to be used with a frame of choice with one  blank scenario (with comments noting details of usage):</p> <pre><code>frame_name = FILL_IN_NAME_OF_FRAME_TO_USE\n# A sweep python file must contain a 'parameter_sets' attribute, which\n# is a dict with keys being names of frames and values being dicts of\n# param_name:value entries OR a generator of such dicts\nparameter_sets = {\n    # This key indicates the contained information is for building off\n    # the specified frame\n    frame_name: {\n        # Each dict in 'sweeps' list is a set of param: value overrides\n        # to be applied - a scenario. Note that the parameter lists are\n        # arbitrary. Each scenario can include as many or few parameters\n        # as you want. One experiment will be created per entry in 'sweeps'\n        'sweeps': [\n            # Optional: A provided 'experiment_name' in a sweep entry will\n            # name the corresponding experiment. Default experiment name is\n            # the name of the frame.\n            {}  # This is an entirely blank scenario entry\n        ]\n    }\n}\n</code></pre> <p>To modify the above for practical use requires:</p> <ul> <li>filling in the name of the frame to use</li> <li>filling in one or more sets of hyperparameters to modify</li> </ul> <p>The following is a basic creates four scenarios on top of the baseline frame, the fourth of which makes no changes. </p> <p>Copy/paste it into a file named <code>sweeps.py</code> in your project directory.</p> <pre><code>frame_name = 'baseline'\nparameter_sets = {\n    frame_name: {\n        'sweeps': [\n            {'experiment_name': 'coital_act_rate_COMMERCIAL_low',    'coital_act_rate--COMMERCIAL': 0.001},\n            {'experiment_name': 'coital_act_rate_COMMERCIAL_medium', 'coital_act_rate--COMMERCIAL': 0.005},\n            {'experiment_name': 'coital_act_rate_COMMERCIAL_high',   'coital_act_rate--COMMERCIAL': 0.01},\n            {'experiment_name': 'coital_act_rate_COMMERCIAL_standard'},\n        ]\n    }\n}\n</code></pre>"},{"location":"tutorials/sweep_parameter/#using-scenarios","title":"Using scenarios","text":"<p>Sweep files are inputs to the <code>run</code> command. They are optional. Not specifying one is equivalent to running a frame as-is (no changes).</p> <p>When specified as an input to <code>run</code>, one experiment is created per 'sweeps' entry, each containing one simulation per (calibrated) parameterization in the sample file (if provided). Otherwise, one simulation is contained per experiment.</p> <p>The following command utilizes the above sweeps file that varies hyperparameter coital_act_rate--COMMERCIAL (with no  samples).</p> <p>Since there are four sweep entries, the command will generate: one suite of four experiments of one simulation, or 1 * 4 * 1 = 4 simulations in total.</p> <pre><code>python -m emodpy_workflow.scripts.run -f baseline -N commercial_sex_scenarios -o output -p ContainerPlatform -w sweeps.py\n</code></pre>"},{"location":"tutorials/sweep_parameter/#downloading-scenario-output-files","title":"Downloading scenario output file(s)","text":"<p>Output file(s) from completed simulation(s) can be obtained via the <code>download</code> command. The following will download the InsetChart.json file from each simulation in each experiment in the prior <code>run</code> execution:</p> <pre><code>python -m emodpy_workflow.scripts.download -d output/InsetChart.json -r output/experiment_index.csv -p ContainerPlatform\n</code></pre> <p>Full documentation of the <code>download</code> command is located here.</p>"},{"location":"tutorials/sweep_parameter/#plotting-results","title":"Plotting results","text":"<p>The built-in <code>plot_inset_chart_mean_compare</code> command is able to plot several experiments of InsetChart.json data for inter-comparison. The following will plot data from the files just downloaded, one colored line per experiment (its  average of one simulation each):</p> <pre><code>python -m emodpy_hiv.plotting.plot_inset_chart_mean_compare output/coital_act_rate_COMMERCIAL_low--0/InsetChart/ output/coital_act_rate_COMMERCIAL_medium--1/InsetChart/ output/coital_act_rate_COMMERCIAL_high--2/InsetChart/ -o plots\n</code></pre> <p>A generated .png file will be located at: <code>plots/InsetChart_Compare.png</code> for inspection. For example,</p> <p></p>"},{"location":"tutorials/using_parameterized_calls/","title":"Using ParameterizedCalls","text":"<p>A ParameterizedCall is a mapping of a hyperparameter names (strings) to specific locations in the model input building process. These mappings are used to map hyperparameter values to model changes during input build time, for example, during model calibration or scenario running.</p> <p>A ParameterizedCall is:</p> <ul> <li>Parameterized : It defines hyperparameters users can utilize during model input building.</li> <li>Call : It has a function that will be called at model input building time with any provided values for matching  defined hyperparameters.</li> </ul>"},{"location":"tutorials/using_parameterized_calls/#by-example","title":"By Example","text":"<p>Here we will explore the features and capabilities of ParameterizedCalls through a series of related examples.</p> <p>They will refer to this function to be called at build time, which adds an HIV vaccine intervention to an  EMOD-HIV campaign:</p> <pre><code>def add_hiv_vaccine(campaign: api_campaign,\n                    vaccine_efficacy: float = 1.0,\n                    node_ids: List[int] = None):\n    hiv_vaccine = ControlledVaccine(campaign=campaign,\n                                    waning_config=Constant(constant_effect=vaccine_efficacy))\n    add_intervention_triggered(campaign=campaign,\n                               intervention_list=[hiv_vaccine],\n                               triggers_list=[\"STIDebut\"],\n                               start_year=2026,\n                               node_ids=node_ids)\n    return campaign\n</code></pre>"},{"location":"tutorials/using_parameterized_calls/#1-starting-from-scratch","title":"1. Starting from scratch","text":"<p>This example shows a ParameterizedCall (in name only!), as it defines no hyperparameters. The result of this  ParameterizedCall at input building time is simply the calling of function <code>add_hiv_vaccine</code> with full function  defaults.</p> <pre><code>    pc = ParameterizedCall(func=add_hiv_vaccine)\n</code></pre>"},{"location":"tutorials/using_parameterized_calls/#2-adding-a-hyperparameter","title":"2. Adding a hyperparameter","text":"<p>A hyperparameter is essentially a named value. Specifically, it is the name of a parameter in one or more function calls. Here we call out the parameter <code>vaccine_efficacy</code> of function <code>add_hiv_vaccine</code> as a hyperparameter.</p> <pre><code>    hp = {'vaccine_efficacy': None}\n    pc = ParameterizedCall(func=add_hiv_vaccine, hyperparameters=hp)\n</code></pre> <p>This example does exactly what the prior example does with one change: <code>vaccine_efficacy</code> is exposed to input building as a hyperparameter for modification.</p> <p>Important</p> <p>The spelling of <code>vaccine_efficacy</code> in the ParameterizedCall and the <code>add_hiv_vaccine</code> function parameter must exactly match.</p>"},{"location":"tutorials/using_parameterized_calls/#3-hyperparameter-default-values","title":"3. Hyperparameter default values","text":"<p>Note the prior example defined the dictionary of hyperparameters to be:</p> <pre><code>hp = {'vaccine_efficacy': None}\n</code></pre> <p>What does that None mean?</p> <p>Important</p> <p>A None value for a hyperparameter defined in a ParameterizedCall means \"use the function default\". In other words, it means <code>vaccine_efficacy</code> is a hyperparameter, nothing else. The function <code>add_hiv_vaccine</code> still behaves exactly as defined with a default value of 1.0 .</p> <p>But what if we want don't want the standard function default? We can instead do this:</p> <pre><code>    hp = {'vaccine_efficacy': 0.8}\n    pc = ParameterizedCall(func=add_hiv_vaccine, hyperparameters=hp)\n</code></pre> <p>This alternate usage indicates that <code>vaccine_efficacy</code> is a hyperparameter and the default value of it at input building time should be 0.8.</p> <p>Important</p> <p>Giving a hyperparameter definition a non-None value overrides the default behavior of the specified function.</p>"},{"location":"tutorials/using_parameterized_calls/#4-non-hyperparameter-overrides","title":"4. Non-hyperparameter overrides","text":"<p>Sometimes you want to alter the default values of function parameters without making them hyperparameters. For example, you might want to alter the default set of nodes <code>add_hiv_vaccine</code> applies to, but one would never calibrate it. This is where non-hyperparameters come in:</p> <pre><code>    nhp = {'node_ids': [1, 2]}\n    pc = ParameterizedCall(func=add_hiv_vaccine, non_hyperparameters=nhp)\n</code></pre> <p>This indicates that <code>node_ids</code> is a not a hyperparameter but the default value of it at input building time should be <code>[1, 2]</code> instead of its normal behavior.</p> <p>Important</p> <p>Non-hyperparameters override the default behavior of the specified function, but do not create hyperparameters for use, which is especially useful for non-calibrateable overrides.</p>"},{"location":"tutorials/using_parameterized_calls/#5-contextual-labels","title":"5. Contextual labels","text":"<p>Sometimes you want to define more than one ParameterizedCall calling the same function. This is especially true when non_hyperparameters are needed for context. For example:</p> <pre><code>    pcs = []    \n\n    nhp = {'node_ids': [1, 2]}\n    hp = {'vaccine_efficacy': 0.8}\n    pc = ParameterizedCall(func=add_hiv_vaccine,\n                           hyperparameters=hp,\n                           non_hyperparameters=nhp)\n    pcs.append(pc)\n\n    nhp = {'node_ids': [3, 4]}\n    hp = {'vaccine_efficacy': 0.5}\n    pc = ParameterizedCall(func=add_hiv_vaccine,\n                           hyperparameters=hp,\n                           non_hyperparameters=nhp)\n    pcs.append(pc)\n</code></pre> <p>The intent of this is to define two hyperparameters named <code>vaccine_efficacy</code>, one for nodes 1 and 2 and the second for nodes 3 and 4. </p> <p>Important</p> <p>However, since they share the same name, <code>vaccine_efficacy</code>, the actual effect is a single hyperparameter named <code>vaccine_efficacy</code> that is applied to both ParameterizedCalls at input building time. They are tied together.</p> <p>Tying multiple changes to a single hyperparameter can be a legitimate thing to do. But not in this case. How do we fix this? We need to apply some context to  the ParameterizedCalls.</p> <pre><code>    pcs = []    \n\n    nhp = {'node_ids': [1, 2]}\n    hp = {'vaccine_efficacy': 0.8}\n    label = 'nodes_1_and_2'\n    pc = ParameterizedCall(func=add_hiv_vaccine,\n                           hyperparameters=hp,\n                           non_hyperparameters=nhp,\n                           label=label)\n    pcs.append(pc)\n\n    nhp = {'node_ids': [3, 4]}\n    hp = {'vaccine_efficacy': 0.5}\n    label = 'nodes_3_and_4'\n    pc = ParameterizedCall(func=add_hiv_vaccine,\n                           hyperparameters=hp,\n                           non_hyperparameters=nhp,\n                           label=label)\n    pcs.append(pc)\n</code></pre> <p>This shows the usage of contextual labels to disambiguate hyperparameters that otherwise have identical names. But one needs to also specify the context when calibrating or running scenarios. The full names of these two hyperparameters for calibration and scenario purposes are now:</p> <pre><code>'vaccine_efficacy--nodes_1_and_2'\n'vaccine_efficacy--nodes_3_and_4'\n</code></pre> <p>Important</p> <p>The <code>'--'</code>, if present, separates the hyperparameter name (as a function parameter) and its contextual label, if defined.</p>"},{"location":"tutorials/using_parameterized_calls/#6-putting-it-all-together-a-quiz","title":"6. Putting it all together (a quiz)","text":"<p>Now that you know about ParameterizedCalls, hyperparameters, non_hyperparameters, and their contextual labels, it is time for a mixed up example to test your knowledge!</p> <p>Try to identify in this example:</p> <ul> <li>all full hyperparameter names (including their label, if present)</li> <li>their default values</li> <li>all non_hyperparameter names (including their label, if present)</li> <li>their default values</li> <li>are any hyperparameters tied together? Might be a bug?</li> </ul> <pre><code>    pcs = []    \n\n    nhp = {'node_ids': [1, 2]}\n    hp = {'vaccine_efficacy': 0.8}\n    label = 'nodes_1_and_2'\n    pc = ParameterizedCall(func=add_hiv_vaccine,\n                           hyperparameters=hp,\n                           non_hyperparameters=nhp,\n                           label=label)\n    pcs.append(pc)\n\n    nhp = {'node_ids': [3, 4]}\n    hp = {'vaccine_efficacy': 0.5}\n    label = 'nodes_1_and_2'\n    pc = ParameterizedCall(func=add_hiv_vaccine,\n                           hyperparameters=hp,\n                           non_hyperparameters=nhp,\n                           label=label)\n    pcs.append(pc)\n\n    hp = {'vaccine_efficacy': None}\n    label = 'all_nodes'\n    pc = ParameterizedCall(func=add_hiv_vaccine,\n                           hyperparameters=hp,\n                           label=label)\n    pcs.append(pc)\n\n    hp = {'vaccine_efficacy': 0.4}\n    pc = ParameterizedCall(func=add_hiv_vaccine, hyperparameters=hp)\n    pcs.append(pc)\n</code></pre> <p>Answer below:</p> <pre><code>hyperparameters: vaccine_efficacy--nodes_1_and_2, default 0.8\nnon_hyperparameters: nodes_ids, [1, 2]\n\nhyperparameters: vaccine_efficacy--nodes_1_and_2, default 0.5\nnon_hyperparameters: node_ids, [3, 4]\nLikely a bug here, tied to above, the nodes are different from\nabove but the label is shared. Probably meant to have\na label of 'nodes_3_and_4'.\n\nhyperparameters: vaccine_efficacy--all_nodes, default 1.0 from function\nnon_hyperparameters: none in this ParameterizedCall, applies to all nodes\nfrom function\n\nhyperparameters: vaccine_efficacy, default 0.4\nnon_hyperparameters: none in this ParameterizedCall, applies to all nodes\nfrom function\n</code></pre>"}]}